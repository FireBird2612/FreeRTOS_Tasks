
EMotoRad_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006144  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006314  08006314  00007314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f8  080064f8  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080064f8  080064f8  000074f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006500  08006500  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006500  08006500  00007500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006508  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015468  20000014  0800651c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001547c  0800651c  0000847c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001685a  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003233  00000000  00000000  0001e89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00021ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107c  00000000  00000000  00023008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d3b  00000000  00000000  00024084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fcb  00000000  00000000  00045dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb518  00000000  00000000  0005ed8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a2a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  0014a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0014fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080062fc 	.word	0x080062fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080062fc 	.word	0x080062fc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012dfc 	.word	0x20012dfc

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f103 0208 	add.w	r2, r3, #8
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f103 0208 	add.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000604:	d103      	bne.n	800060e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e00c      	b.n	8000628 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3308      	adds	r3, #8
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e002      	b.n	800061c <vListInsert+0x2e>
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	429a      	cmp	r2, r3
 8000626:	d2f6      	bcs.n	8000616 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	601a      	str	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	6892      	ldr	r2, [r2, #8]
 8000676:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	6852      	ldr	r2, [r2, #4]
 8000680:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	d103      	bne.n	8000694 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	@ 0x30
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f9ef 	bl	8001aac <pvPortMalloc>
 80006ce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d013      	beq.n	80006fe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80006d6:	2058      	movs	r0, #88	@ 0x58
 80006d8:	f001 f9e8 	bl	8001aac <pvPortMalloc>
 80006dc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80006e4:	2258      	movs	r2, #88	@ 0x58
 80006e6:	2100      	movs	r1, #0
 80006e8:	69f8      	ldr	r0, [r7, #28]
 80006ea:	f005 fdcd 	bl	8006288 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80006f4:	e005      	b.n	8000702 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f001 fa94 	bl	8001c24 <vPortFree>
 80006fc:	e001      	b.n	8000702 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d013      	beq.n	8000730 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000708:	88fa      	ldrh	r2, [r7, #6]
 800070a:	2300      	movs	r3, #0
 800070c:	9303      	str	r3, [sp, #12]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f000 f80e 	bl	8000740 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000724:	69f8      	ldr	r0, [r7, #28]
 8000726:	f000 f89b 	bl	8000860 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	e002      	b.n	8000736 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000734:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000736:	69bb      	ldr	r3, [r7, #24]
    }
 8000738:	4618      	mov	r0, r3
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800074e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000750:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	461a      	mov	r2, r3
 8000758:	21a5      	movs	r1, #165	@ 0xa5
 800075a:	f005 fd95 	bl	8006288 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800075e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000768:	3b01      	subs	r3, #1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	f023 0307 	bic.w	r3, r3, #7
 8000776:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00b      	beq.n	800079a <prvInitialiseNewTask+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000786:	f383 8811 	msr	BASEPRI, r3
 800078a:	f3bf 8f6f 	isb	sy
 800078e:	f3bf 8f4f 	dsb	sy
 8000792:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	e7fd      	b.n	8000796 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d01e      	beq.n	80007de <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	e012      	b.n	80007cc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	4413      	add	r3, r2
 80007ac:	7819      	ldrb	r1, [r3, #0]
 80007ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	4413      	add	r3, r2
 80007b4:	3334      	adds	r3, #52	@ 0x34
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	2b09      	cmp	r3, #9
 80007d0:	d9e9      	bls.n	80007a6 <prvInitialiseNewTask+0x66>
 80007d2:	e000      	b.n	80007d6 <prvInitialiseNewTask+0x96>
            {
                break;
 80007d4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80007d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80007de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d90b      	bls.n	80007fc <prvInitialiseNewTask+0xbc>
        __asm volatile
 80007e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007e8:	f383 8811 	msr	BASEPRI, r3
 80007ec:	f3bf 8f6f 	isb	sy
 80007f0:	f3bf 8f4f 	dsb	sy
 80007f4:	613b      	str	r3, [r7, #16]
    }
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80007fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fe:	2b04      	cmp	r3, #4
 8000800:	d901      	bls.n	8000806 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000802:	2304      	movs	r3, #4
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800080c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800080e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000810:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000814:	3304      	adds	r3, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fedc 	bl	80005d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800081c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800081e:	3318      	adds	r3, #24
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed7 	bl	80005d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800082a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800082c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800082e:	f1c3 0205 	rsb	r2, r3, #5
 8000832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000834:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	68f9      	ldr	r1, [r7, #12]
 8000840:	69b8      	ldr	r0, [r7, #24]
 8000842:	f000 fed3 	bl	80015ec <pxPortInitialiseStack>
 8000846:	4602      	mov	r2, r0
 8000848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800084a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800084c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000856:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000860:	b5b0      	push	{r4, r5, r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
 8000866:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000868:	f000 fff0 	bl	800184c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800086c:	4b4f      	ldr	r3, [pc, #316]	@ (80009ac <prvAddNewTaskToReadyList+0x14c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a4e      	ldr	r2, [pc, #312]	@ (80009ac <prvAddNewTaskToReadyList+0x14c>)
 8000874:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000876:	4b4e      	ldr	r3, [pc, #312]	@ (80009b0 <prvAddNewTaskToReadyList+0x150>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d109      	bne.n	8000892 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800087e:	4a4c      	ldr	r2, [pc, #304]	@ (80009b0 <prvAddNewTaskToReadyList+0x150>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000884:	4b49      	ldr	r3, [pc, #292]	@ (80009ac <prvAddNewTaskToReadyList+0x14c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d110      	bne.n	80008ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800088c:	f000 fbe8 	bl	8001060 <prvInitialiseTaskLists>
 8000890:	e00d      	b.n	80008ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000892:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <prvAddNewTaskToReadyList+0x154>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d109      	bne.n	80008ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800089a:	4b45      	ldr	r3, [pc, #276]	@ (80009b0 <prvAddNewTaskToReadyList+0x150>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d802      	bhi.n	80008ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80008a8:	4a41      	ldr	r2, [pc, #260]	@ (80009b0 <prvAddNewTaskToReadyList+0x150>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80008ae:	4b42      	ldr	r3, [pc, #264]	@ (80009b8 <prvAddNewTaskToReadyList+0x158>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a40      	ldr	r2, [pc, #256]	@ (80009b8 <prvAddNewTaskToReadyList+0x158>)
 80008b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80008b8:	4b3f      	ldr	r3, [pc, #252]	@ (80009b8 <prvAddNewTaskToReadyList+0x158>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d016      	beq.n	80008f4 <prvAddNewTaskToReadyList+0x94>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fd53 	bl	8003374 <SEGGER_SYSVIEW_OnTaskCreate>
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	461d      	mov	r5, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	461c      	mov	r4, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	1ae3      	subs	r3, r4, r3
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	462b      	mov	r3, r5
 80008f0:	f001 fc0c 	bl	800210c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fdc0 	bl	800347c <SEGGER_SYSVIEW_OnTaskStartReady>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000900:	2201      	movs	r2, #1
 8000902:	409a      	lsls	r2, r3
 8000904:	4b2d      	ldr	r3, [pc, #180]	@ (80009bc <prvAddNewTaskToReadyList+0x15c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4313      	orrs	r3, r2
 800090a:	4a2c      	ldr	r2, [pc, #176]	@ (80009bc <prvAddNewTaskToReadyList+0x15c>)
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000912:	492b      	ldr	r1, [pc, #172]	@ (80009c0 <prvAddNewTaskToReadyList+0x160>)
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3304      	adds	r3, #4
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	3204      	adds	r2, #4
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	1d1a      	adds	r2, r3, #4
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <prvAddNewTaskToReadyList+0x160>)
 8000952:	441a      	add	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800095c:	4918      	ldr	r1, [pc, #96]	@ (80009c0 <prvAddNewTaskToReadyList+0x160>)
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1c59      	adds	r1, r3, #1
 800096c:	4814      	ldr	r0, [pc, #80]	@ (80009c0 <prvAddNewTaskToReadyList+0x160>)
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4403      	add	r3, r0
 8000978:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800097a:	f000 ff99 	bl	80018b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <prvAddNewTaskToReadyList+0x154>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00e      	beq.n	80009a4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <prvAddNewTaskToReadyList+0x150>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <prvAddNewTaskToReadyList+0x164>)
 8000996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	f3bf 8f4f 	dsb	sy
 80009a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bdb0      	pop	{r4, r5, r7, pc}
 80009ac:	20000108 	.word	0x20000108
 80009b0:	20000030 	.word	0x20000030
 80009b4:	20000114 	.word	0x20000114
 80009b8:	20000124 	.word	0x20000124
 80009bc:	20000110 	.word	0x20000110
 80009c0:	20000034 	.word	0x20000034
 80009c4:	e000ed04 	.word	0xe000ed04

080009c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d018      	beq.n	8000a0c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <vTaskDelay+0x64>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00b      	beq.n	80009fa <vTaskDelay+0x32>
        __asm volatile
 80009e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009e6:	f383 8811 	msr	BASEPRI, r3
 80009ea:	f3bf 8f6f 	isb	sy
 80009ee:	f3bf 8f4f 	dsb	sy
 80009f2:	60bb      	str	r3, [r7, #8]
    }
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	e7fd      	b.n	80009f6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80009fa:	f000 f87d 	bl	8000af8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80009fe:	2100      	movs	r1, #0
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 fd73 	bl	80014ec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000a06:	f000 f885 	bl	8000b14 <xTaskResumeAll>
 8000a0a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d107      	bne.n	8000a22 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <vTaskDelay+0x68>)
 8000a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	f3bf 8f4f 	dsb	sy
 8000a1e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000130 	.word	0x20000130
 8000a30:	e000ed04 	.word	0xe000ed04

08000a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <vTaskStartScheduler+0xa4>)
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	2282      	movs	r2, #130	@ 0x82
 8000a46:	4925      	ldr	r1, [pc, #148]	@ (8000adc <vTaskStartScheduler+0xa8>)
 8000a48:	4825      	ldr	r0, [pc, #148]	@ (8000ae0 <vTaskStartScheduler+0xac>)
 8000a4a:	f7ff fe33 	bl	80006b4 <xTaskCreate>
 8000a4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d129      	bne.n	8000aaa <vTaskStartScheduler+0x76>
        __asm volatile
 8000a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a5a:	f383 8811 	msr	BASEPRI, r3
 8000a5e:	f3bf 8f6f 	isb	sy
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	60bb      	str	r3, [r7, #8]
    }
 8000a68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <vTaskStartScheduler+0xb0>)
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <vTaskStartScheduler+0xb4>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <vTaskStartScheduler+0xb8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <vTaskStartScheduler+0xbc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3334      	adds	r3, #52	@ 0x34
 8000a84:	2205      	movs	r2, #5
 8000a86:	4915      	ldr	r1, [pc, #84]	@ (8000adc <vTaskStartScheduler+0xa8>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 fbed 	bl	8006268 <memcmp>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d005      	beq.n	8000aa0 <vTaskStartScheduler+0x6c>
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <vTaskStartScheduler+0xbc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fcad 	bl	80033f8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8000a9e:	e001      	b.n	8000aa4 <vTaskStartScheduler+0x70>
 8000aa0:	f002 fc4c 	bl	800333c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000aa4:	f000 fe2e 	bl	8001704 <xPortStartScheduler>
 8000aa8:	e00f      	b.n	8000aca <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ab0:	d10b      	bne.n	8000aca <vTaskStartScheduler+0x96>
        __asm volatile
 8000ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ab6:	f383 8811 	msr	BASEPRI, r3
 8000aba:	f3bf 8f6f 	isb	sy
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	607b      	str	r3, [r7, #4]
    }
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	e7fd      	b.n	8000ac6 <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <vTaskStartScheduler+0xc0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000012c 	.word	0x2000012c
 8000adc:	08006314 	.word	0x08006314
 8000ae0:	08001051 	.word	0x08001051
 8000ae4:	20000128 	.word	0x20000128
 8000ae8:	20000114 	.word	0x20000114
 8000aec:	2000010c 	.word	0x2000010c
 8000af0:	20000030 	.word	0x20000030
 8000af4:	20000000 	.word	0x20000000

08000af8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <vTaskSuspendAll+0x18>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a03      	ldr	r2, [pc, #12]	@ (8000b10 <vTaskSuspendAll+0x18>)
 8000b04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20000130 	.word	0x20000130

08000b14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000b22:	4b73      	ldr	r3, [pc, #460]	@ (8000cf0 <xTaskResumeAll+0x1dc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10b      	bne.n	8000b42 <xTaskResumeAll+0x2e>
        __asm volatile
 8000b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b2e:	f383 8811 	msr	BASEPRI, r3
 8000b32:	f3bf 8f6f 	isb	sy
 8000b36:	f3bf 8f4f 	dsb	sy
 8000b3a:	607b      	str	r3, [r7, #4]
    }
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	e7fd      	b.n	8000b3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000b42:	f000 fe83 	bl	800184c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000b46:	4b6a      	ldr	r3, [pc, #424]	@ (8000cf0 <xTaskResumeAll+0x1dc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	4a68      	ldr	r2, [pc, #416]	@ (8000cf0 <xTaskResumeAll+0x1dc>)
 8000b4e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b50:	4b67      	ldr	r3, [pc, #412]	@ (8000cf0 <xTaskResumeAll+0x1dc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f040 80c4 	bne.w	8000ce2 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000b5a:	4b66      	ldr	r3, [pc, #408]	@ (8000cf4 <xTaskResumeAll+0x1e0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 80bf 	beq.w	8000ce2 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b64:	e08e      	b.n	8000c84 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b66:	4b64      	ldr	r3, [pc, #400]	@ (8000cf8 <xTaskResumeAll+0x1e4>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	6a12      	ldr	r2, [r2, #32]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	69d2      	ldr	r2, [r2, #28]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3318      	adds	r3, #24
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d103      	bne.n	8000b9c <xTaskResumeAll+0x88>
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	68d2      	ldr	r2, [r2, #12]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	69fa      	ldr	r2, [r7, #28]
 8000bc2:	6892      	ldr	r2, [r2, #8]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d103      	bne.n	8000bda <xTaskResumeAll+0xc6>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fc45 	bl	800347c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <xTaskResumeAll+0x1e8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	4a3e      	ldr	r2, [pc, #248]	@ (8000cfc <xTaskResumeAll+0x1e8>)
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c08:	493d      	ldr	r1, [pc, #244]	@ (8000d00 <xTaskResumeAll+0x1ec>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3304      	adds	r3, #4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	69fa      	ldr	r2, [r7, #28]
 8000c2e:	3204      	adds	r2, #4
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	1d1a      	adds	r2, r3, #4
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4a2e      	ldr	r2, [pc, #184]	@ (8000d00 <xTaskResumeAll+0x1ec>)
 8000c48:	441a      	add	r2, r3
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c52:	492b      	ldr	r1, [pc, #172]	@ (8000d00 <xTaskResumeAll+0x1ec>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c59      	adds	r1, r3, #1
 8000c62:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <xTaskResumeAll+0x1ec>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4403      	add	r3, r0
 8000c6e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <xTaskResumeAll+0x1f0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d302      	bcc.n	8000c84 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8000c7e:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <xTaskResumeAll+0x1f4>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <xTaskResumeAll+0x1e4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f47f af6c 	bne.w	8000b66 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000c94:	f000 fa62 	bl	800115c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <xTaskResumeAll+0x1f8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d010      	beq.n	8000cc6 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000ca4:	f000 f848 	bl	8000d38 <xTaskIncrementTick>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <xTaskResumeAll+0x1f4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f1      	bne.n	8000ca4 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <xTaskResumeAll+0x1f8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <xTaskResumeAll+0x1f4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d009      	beq.n	8000ce2 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <xTaskResumeAll+0x1fc>)
 8000cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	f3bf 8f4f 	dsb	sy
 8000cde:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000ce2:	f000 fde5 	bl	80018b0 <vPortExitCritical>

    return xAlreadyYielded;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000130 	.word	0x20000130
 8000cf4:	20000108 	.word	0x20000108
 8000cf8:	200000c8 	.word	0x200000c8
 8000cfc:	20000110 	.word	0x20000110
 8000d00:	20000034 	.word	0x20000034
 8000d04:	20000030 	.word	0x20000030
 8000d08:	2000011c 	.word	0x2000011c
 8000d0c:	20000118 	.word	0x20000118
 8000d10:	e000ed04 	.word	0xe000ed04

08000d14 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d1a:	f000 fe85 	bl	8001a28 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <xTaskGetTickCountFromISR+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000d28:	683b      	ldr	r3, [r7, #0]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000010c 	.word	0x2000010c

08000d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d42:	4b80      	ldr	r3, [pc, #512]	@ (8000f44 <xTaskIncrementTick+0x20c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 80f1 	bne.w	8000f2e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f48 <xTaskIncrementTick+0x210>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000d54:	4a7c      	ldr	r2, [pc, #496]	@ (8000f48 <xTaskIncrementTick+0x210>)
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d121      	bne.n	8000da4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000d60:	4b7a      	ldr	r3, [pc, #488]	@ (8000f4c <xTaskIncrementTick+0x214>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00b      	beq.n	8000d82 <xTaskIncrementTick+0x4a>
        __asm volatile
 8000d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d6e:	f383 8811 	msr	BASEPRI, r3
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	607b      	str	r3, [r7, #4]
    }
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <xTaskIncrementTick+0x46>
 8000d82:	4b72      	ldr	r3, [pc, #456]	@ (8000f4c <xTaskIncrementTick+0x214>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	4b71      	ldr	r3, [pc, #452]	@ (8000f50 <xTaskIncrementTick+0x218>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6f      	ldr	r2, [pc, #444]	@ (8000f4c <xTaskIncrementTick+0x214>)
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4a6f      	ldr	r2, [pc, #444]	@ (8000f50 <xTaskIncrementTick+0x218>)
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6f      	ldr	r3, [pc, #444]	@ (8000f54 <xTaskIncrementTick+0x21c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f54 <xTaskIncrementTick+0x21c>)
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	f000 f9dc 	bl	800115c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000da4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f58 <xTaskIncrementTick+0x220>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	f0c0 80aa 	bcc.w	8000f04 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <xTaskIncrementTick+0x214>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d104      	bne.n	8000dc4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dba:	4b67      	ldr	r3, [pc, #412]	@ (8000f58 <xTaskIncrementTick+0x220>)
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dc0:	601a      	str	r2, [r3, #0]
                    break;
 8000dc2:	e09f      	b.n	8000f04 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dc4:	4b61      	ldr	r3, [pc, #388]	@ (8000f4c <xTaskIncrementTick+0x214>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000dd4:	6a3a      	ldr	r2, [r7, #32]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d203      	bcs.n	8000de4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8000f58 <xTaskIncrementTick+0x220>)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000de2:	e08f      	b.n	8000f04 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	68d2      	ldr	r2, [r2, #12]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	6892      	ldr	r2, [r2, #8]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	3304      	adds	r3, #4
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d103      	bne.n	8000e12 <xTaskIncrementTick+0xda>
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d01e      	beq.n	8000e68 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	6a12      	ldr	r2, [r2, #32]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	69d2      	ldr	r2, [r2, #28]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d103      	bne.n	8000e58 <xTaskIncrementTick+0x120>
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6a1a      	ldr	r2, [r3, #32]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fb06 	bl	800347c <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e74:	2201      	movs	r2, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <xTaskIncrementTick+0x224>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	4a37      	ldr	r2, [pc, #220]	@ (8000f5c <xTaskIncrementTick+0x224>)
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e86:	4936      	ldr	r1, [pc, #216]	@ (8000f60 <xTaskIncrementTick+0x228>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	3304      	adds	r3, #4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	3204      	adds	r2, #4
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4a26      	ldr	r2, [pc, #152]	@ (8000f60 <xTaskIncrementTick+0x228>)
 8000ec6:	441a      	add	r2, r3
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed0:	4923      	ldr	r1, [pc, #140]	@ (8000f60 <xTaskIncrementTick+0x228>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1c59      	adds	r1, r3, #1
 8000ee0:	481f      	ldr	r0, [pc, #124]	@ (8000f60 <xTaskIncrementTick+0x228>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4403      	add	r3, r0
 8000eec:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <xTaskIncrementTick+0x22c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f67f af59 	bls.w	8000db0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f02:	e755      	b.n	8000db0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <xTaskIncrementTick+0x22c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f0a:	4915      	ldr	r1, [pc, #84]	@ (8000f60 <xTaskIncrementTick+0x228>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d901      	bls.n	8000f20 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <xTaskIncrementTick+0x230>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f2c:	e004      	b.n	8000f38 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <xTaskIncrementTick+0x234>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <xTaskIncrementTick+0x234>)
 8000f36:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000130 	.word	0x20000130
 8000f48:	2000010c 	.word	0x2000010c
 8000f4c:	200000c0 	.word	0x200000c0
 8000f50:	200000c4 	.word	0x200000c4
 8000f54:	20000120 	.word	0x20000120
 8000f58:	20000128 	.word	0x20000128
 8000f5c:	20000110 	.word	0x20000110
 8000f60:	20000034 	.word	0x20000034
 8000f64:	20000030 	.word	0x20000030
 8000f68:	2000011c 	.word	0x2000011c
 8000f6c:	20000118 	.word	0x20000118

08000f70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000f76:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <vTaskSwitchContext+0xc8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <vTaskSwitchContext+0xcc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000f84:	e053      	b.n	800102e <vTaskSwitchContext+0xbe>
        xYieldPending = pdFALSE;
 8000f86:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <vTaskSwitchContext+0xcc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <vTaskSwitchContext+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	f1c3 031f 	rsb	r3, r3, #31
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4928      	ldr	r1, [pc, #160]	@ (8001044 <vTaskSwitchContext+0xd4>)
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10b      	bne.n	8000fce <vTaskSwitchContext+0x5e>
        __asm volatile
 8000fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	607b      	str	r3, [r7, #4]
    }
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	e7fd      	b.n	8000fca <vTaskSwitchContext+0x5a>
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <vTaskSwitchContext+0xd4>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d104      	bne.n	8000ffe <vTaskSwitchContext+0x8e>
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a10      	ldr	r2, [pc, #64]	@ (8001048 <vTaskSwitchContext+0xd8>)
 8001006:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <vTaskSwitchContext+0xd8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3334      	adds	r3, #52	@ 0x34
 800100e:	2205      	movs	r2, #5
 8001010:	490e      	ldr	r1, [pc, #56]	@ (800104c <vTaskSwitchContext+0xdc>)
 8001012:	4618      	mov	r0, r3
 8001014:	f005 f928 	bl	8006268 <memcmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <vTaskSwitchContext+0xba>
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <vTaskSwitchContext+0xd8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f002 f9e8 	bl	80033f8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001028:	e001      	b.n	800102e <vTaskSwitchContext+0xbe>
        traceTASK_SWITCHED_IN();
 800102a:	f002 f987 	bl	800333c <SEGGER_SYSVIEW_OnIdle>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000130 	.word	0x20000130
 800103c:	2000011c 	.word	0x2000011c
 8001040:	20000110 	.word	0x20000110
 8001044:	20000034 	.word	0x20000034
 8001048:	20000030 	.word	0x20000030
 800104c:	08006314 	.word	0x08006314

08001050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001058:	f000 f842 	bl	80010e0 <prvCheckTasksWaitingTermination>
 800105c:	e7fc      	b.n	8001058 <prvIdleTask+0x8>
	...

08001060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e00c      	b.n	8001086 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <prvInitialiseTaskLists+0x60>)
 8001078:	4413      	add	r3, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8a 	bl	8000594 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3301      	adds	r3, #1
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d9ef      	bls.n	800106c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <prvInitialiseTaskLists+0x64>)
 800108e:	f7ff fa81 	bl	8000594 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001092:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <prvInitialiseTaskLists+0x68>)
 8001094:	f7ff fa7e 	bl	8000594 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <prvInitialiseTaskLists+0x6c>)
 800109a:	f7ff fa7b 	bl	8000594 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800109e:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <prvInitialiseTaskLists+0x70>)
 80010a0:	f7ff fa78 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <prvInitialiseTaskLists+0x74>)
 80010a6:	f7ff fa75 	bl	8000594 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <prvInitialiseTaskLists+0x78>)
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <prvInitialiseTaskLists+0x64>)
 80010ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <prvInitialiseTaskLists+0x7c>)
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <prvInitialiseTaskLists+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000034 	.word	0x20000034
 80010c4:	20000098 	.word	0x20000098
 80010c8:	200000ac 	.word	0x200000ac
 80010cc:	200000c8 	.word	0x200000c8
 80010d0:	200000dc 	.word	0x200000dc
 80010d4:	200000f4 	.word	0x200000f4
 80010d8:	200000c0 	.word	0x200000c0
 80010dc:	200000c4 	.word	0x200000c4

080010e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80010e6:	e019      	b.n	800111c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80010e8:	f000 fbb0 	bl	800184c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <prvCheckTasksWaitingTermination+0x50>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3304      	adds	r3, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fab1 	bl	8000660 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <prvCheckTasksWaitingTermination+0x54>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <prvCheckTasksWaitingTermination+0x54>)
 8001106:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <prvCheckTasksWaitingTermination+0x58>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3b01      	subs	r3, #1
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <prvCheckTasksWaitingTermination+0x58>)
 8001110:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001112:	f000 fbcd 	bl	80018b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f810 	bl	800113c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <prvCheckTasksWaitingTermination+0x58>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e1      	bne.n	80010e8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000dc 	.word	0x200000dc
 8001134:	20000108 	.word	0x20000108
 8001138:	200000f0 	.word	0x200000f0

0800113c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fd6b 	bl	8001c24 <vPortFree>
            vPortFree( pxTCB );
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fd68 	bl	8001c24 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <prvResetNextTaskUnblockTime+0x30>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d104      	bne.n	8001174 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <prvResetNextTaskUnblockTime+0x34>)
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001170:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001172:	e005      	b.n	8001180 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <prvResetNextTaskUnblockTime+0x30>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <prvResetNextTaskUnblockTime+0x34>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200000c0 	.word	0x200000c0
 8001190:	20000128 	.word	0x20000128

08001194 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80011a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ac:	f383 8811 	msr	BASEPRI, r3
 80011b0:	f3bf 8f6f 	isb	sy
 80011b4:	f3bf 8f4f 	dsb	sy
 80011b8:	613b      	str	r3, [r7, #16]
    }
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80011c0:	f000 fb44 	bl	800184c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80011c4:	4b31      	ldr	r3, [pc, #196]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	3354      	adds	r3, #84	@ 0x54
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d022      	beq.n	800121c <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80011d6:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	3214      	adds	r2, #20
 80011de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	43d2      	mvns	r2, r2
 80011e6:	4011      	ands	r1, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	3214      	adds	r2, #20
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	3354      	adds	r3, #84	@ 0x54
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001204:	2101      	movs	r1, #1
 8001206:	6a38      	ldr	r0, [r7, #32]
 8001208:	f000 f970 	bl	80014ec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <xTaskGenericNotifyWait+0xfc>)
 800120e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800121c:	f000 fb48 	bl	80018b0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001220:	f000 fb14 	bl	800184c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	3214      	adds	r2, #20
 8001232:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4413      	add	r3, r2
 8001242:	3354      	adds	r3, #84	@ 0x54
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d002      	beq.n	8001252 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00e      	b.n	8001270 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	3214      	adds	r2, #20
 800125a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	43d2      	mvns	r2, r2
 8001262:	4011      	ands	r1, r2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	3214      	adds	r2, #20
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <xTaskGenericNotifyWait+0xf8>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	3354      	adds	r3, #84	@ 0x54
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800127e:	f000 fb17 	bl	80018b0 <vPortExitCritical>

        return xReturn;
 8001282:	697b      	ldr	r3, [r7, #20]
    }
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000030 	.word	0x20000030
 8001290:	e000ed04 	.word	0xe000ed04

08001294 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	@ 0x38
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80012a2:	2301      	movs	r3, #1
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <xTaskGenericNotify+0x30>
        __asm volatile
 80012ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012b0:	f383 8811 	msr	BASEPRI, r3
 80012b4:	f3bf 8f6f 	isb	sy
 80012b8:	f3bf 8f4f 	dsb	sy
 80012bc:	623b      	str	r3, [r7, #32]
    }
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10b      	bne.n	80012e2 <xTaskGenericNotify+0x4e>
        __asm volatile
 80012ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	61fb      	str	r3, [r7, #28]
    }
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	e7fd      	b.n	80012de <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80012e6:	f000 fab1 	bl	800184c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80012ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80012f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	3214      	adds	r2, #20
 80012f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012fc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80012fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4413      	add	r3, r2
 8001304:	3354      	adds	r3, #84	@ 0x54
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800130c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	3354      	adds	r3, #84	@ 0x54
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b04      	cmp	r3, #4
 800131c:	d83b      	bhi.n	8001396 <xTaskGenericNotify+0x102>
 800131e:	a201      	add	r2, pc, #4	@ (adr r2, 8001324 <xTaskGenericNotify+0x90>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	080013b7 	.word	0x080013b7
 8001328:	08001339 	.word	0x08001339
 800132c:	08001355 	.word	0x08001355
 8001330:	0800136d 	.word	0x0800136d
 8001334:	0800137b 	.word	0x0800137b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	3214      	adds	r2, #20
 800133e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	ea42 0103 	orr.w	r1, r2, r3
 8001348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	3214      	adds	r2, #20
 800134e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001352:	e033      	b.n	80013bc <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	3214      	adds	r2, #20
 800135a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135e:	1c59      	adds	r1, r3, #1
 8001360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	3214      	adds	r2, #20
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800136a:	e027      	b.n	80013bc <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	3214      	adds	r2, #20
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001378:	e020      	b.n	80013bc <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800137a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800137e:	2b02      	cmp	r3, #2
 8001380:	d006      	beq.n	8001390 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	3214      	adds	r2, #20
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800138e:	e015      	b.n	80013bc <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8001394:	e012      	b.n	80013bc <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001396:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <xTaskGenericNotify+0x244>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00d      	beq.n	80013ba <xTaskGenericNotify+0x126>
        __asm volatile
 800139e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013a2:	f383 8811 	msr	BASEPRI, r3
 80013a6:	f3bf 8f6f 	isb	sy
 80013aa:	f3bf 8f4f 	dsb	sy
 80013ae:	61bb      	str	r3, [r7, #24]
    }
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	e7fd      	b.n	80013b2 <xTaskGenericNotify+0x11e>
                    break;
 80013b6:	bf00      	nop
 80013b8:	e000      	b.n	80013bc <xTaskGenericNotify+0x128>

                    break;
 80013ba:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 8081 	bne.w	80014c8 <xTaskGenericNotify+0x234>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d2:	68d2      	ldr	r2, [r2, #12]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013dc:	6892      	ldr	r2, [r2, #8]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e6:	3304      	adds	r3, #4
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d103      	bne.n	80013f4 <xTaskGenericNotify+0x160>
 80013ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001402:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8001404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001406:	4618      	mov	r0, r3
 8001408:	f002 f838 	bl	800347c <SEGGER_SYSVIEW_OnTaskStartReady>
 800140c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	2201      	movs	r2, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <xTaskGenericNotify+0x248>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4313      	orrs	r3, r2
 800141a:	4a30      	ldr	r2, [pc, #192]	@ (80014dc <xTaskGenericNotify+0x248>)
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001422:	492f      	ldr	r1, [pc, #188]	@ (80014e0 <xTaskGenericNotify+0x24c>)
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
 8001434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001448:	3204      	adds	r2, #4
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800144e:	1d1a      	adds	r2, r3, #4
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <xTaskGenericNotify+0x24c>)
 8001462:	441a      	add	r2, r3
 8001464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800146a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800146c:	491c      	ldr	r1, [pc, #112]	@ (80014e0 <xTaskGenericNotify+0x24c>)
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <xTaskGenericNotify+0x24c>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4403      	add	r3, r0
 8001488:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800148a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00b      	beq.n	80014aa <xTaskGenericNotify+0x216>
        __asm volatile
 8001492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001496:	f383 8811 	msr	BASEPRI, r3
 800149a:	f3bf 8f6f 	isb	sy
 800149e:	f3bf 8f4f 	dsb	sy
 80014a2:	617b      	str	r3, [r7, #20]
    }
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	e7fd      	b.n	80014a6 <xTaskGenericNotify+0x212>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <xTaskGenericNotify+0x250>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d907      	bls.n	80014c8 <xTaskGenericNotify+0x234>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <xTaskGenericNotify+0x254>)
 80014ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f3bf 8f4f 	dsb	sy
 80014c4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80014c8:	f000 f9f2 	bl	80018b0 <vPortExitCritical>

        return xReturn;
 80014cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80014ce:	4618      	mov	r0, r3
 80014d0:	3738      	adds	r7, #56	@ 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000010c 	.word	0x2000010c
 80014dc:	20000110 	.word	0x20000110
 80014e0:	20000034 	.word	0x20000034
 80014e4:	20000030 	.word	0x20000030
 80014e8:	e000ed04 	.word	0xe000ed04

080014ec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80014f6:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014fc:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3304      	adds	r3, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f8ac 	bl	8000660 <uxListRemove>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10b      	bne.n	8001526 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800150e:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001514:	2201      	movs	r2, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <prvAddCurrentTaskToDelayedList+0xec>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4013      	ands	r3, r2
 8001522:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001524:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800152c:	d124      	bne.n	8001578 <prvAddCurrentTaskToDelayedList+0x8c>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d021      	beq.n	8001578 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <prvAddCurrentTaskToDelayedList+0xf0>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	6892      	ldr	r2, [r2, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	3204      	adds	r2, #4
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	1d1a      	adds	r2, r3, #4
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <prvAddCurrentTaskToDelayedList+0xf0>)
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <prvAddCurrentTaskToDelayedList+0xf0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <prvAddCurrentTaskToDelayedList+0xf0>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001576:	e026      	b.n	80015c6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	d209      	bcs.n	80015a4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f7ff f826 	bl	80005ee <vListInsert>
}
 80015a2:	e010      	b.n	80015c6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3304      	adds	r3, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f7ff f81c 	bl	80005ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d202      	bcs.n	80015c6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80015c0:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6013      	str	r3, [r2, #0]
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000010c 	.word	0x2000010c
 80015d4:	20000030 	.word	0x20000030
 80015d8:	20000110 	.word	0x20000110
 80015dc:	200000f4 	.word	0x200000f4
 80015e0:	200000c4 	.word	0x200000c4
 80015e4:	200000c0 	.word	0x200000c0
 80015e8:	20000128 	.word	0x20000128

080015ec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3b04      	subs	r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001604:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3b04      	subs	r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f023 0201 	bic.w	r2, r3, #1
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3b04      	subs	r3, #4
 800161a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <pxPortInitialiseStack+0x64>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b14      	subs	r3, #20
 8001626:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3b04      	subs	r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f06f 0202 	mvn.w	r2, #2
 800163a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b20      	subs	r3, #32
 8001640:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	08001655 	.word	0x08001655

08001654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <prvTaskExitError+0x58>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001666:	d00b      	beq.n	8001680 <prvTaskExitError+0x2c>
        __asm volatile
 8001668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800166c:	f383 8811 	msr	BASEPRI, r3
 8001670:	f3bf 8f6f 	isb	sy
 8001674:	f3bf 8f4f 	dsb	sy
 8001678:	60fb      	str	r3, [r7, #12]
    }
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <prvTaskExitError+0x28>
        __asm volatile
 8001680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	60bb      	str	r3, [r7, #8]
    }
 8001692:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001694:	bf00      	nop
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0fc      	beq.n	8001696 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000004 	.word	0x20000004

080016b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80016b0:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <pxCurrentTCBConst2>)
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	6808      	ldr	r0, [r1, #0]
 80016b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ba:	f380 8809 	msr	PSP, r0
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f380 8811 	msr	BASEPRI, r0
 80016ca:	4770      	bx	lr
 80016cc:	f3af 8000 	nop.w

080016d0 <pxCurrentTCBConst2>:
 80016d0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop

080016d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80016d8:	4808      	ldr	r0, [pc, #32]	@ (80016fc <prvPortStartFirstTask+0x24>)
 80016da:	6800      	ldr	r0, [r0, #0]
 80016dc:	6800      	ldr	r0, [r0, #0]
 80016de:	f380 8808 	msr	MSP, r0
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8814 	msr	CONTROL, r0
 80016ea:	b662      	cpsie	i
 80016ec:	b661      	cpsie	f
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	df00      	svc	0
 80016f8:	bf00      	nop
 80016fa:	0000      	.short	0x0000
 80016fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop

08001704 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <xPortStartScheduler+0x124>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a47      	ldr	r2, [pc, #284]	@ (800182c <xPortStartScheduler+0x128>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d10b      	bne.n	800172c <xPortStartScheduler+0x28>
        __asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	613b      	str	r3, [r7, #16]
    }
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800172c:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <xPortStartScheduler+0x124>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a3f      	ldr	r2, [pc, #252]	@ (8001830 <xPortStartScheduler+0x12c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d10b      	bne.n	800174e <xPortStartScheduler+0x4a>
        __asm volatile
 8001736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800173a:	f383 8811 	msr	BASEPRI, r3
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	60fb      	str	r3, [r7, #12]
    }
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800174e:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <xPortStartScheduler+0x130>)
 8001750:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	22ff      	movs	r2, #255	@ 0xff
 800175e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <xPortStartScheduler+0x134>)
 8001774:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <xPortStartScheduler+0x138>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800177c:	e009      	b.n	8001792 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800177e:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <xPortStartScheduler+0x138>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	4a2d      	ldr	r2, [pc, #180]	@ (800183c <xPortStartScheduler+0x138>)
 8001786:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179a:	2b80      	cmp	r3, #128	@ 0x80
 800179c:	d0ef      	beq.n	800177e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <xPortStartScheduler+0x138>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d00b      	beq.n	80017c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80017aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017ae:	f383 8811 	msr	BASEPRI, r3
 80017b2:	f3bf 8f6f 	isb	sy
 80017b6:	f3bf 8f4f 	dsb	sy
 80017ba:	60bb      	str	r3, [r7, #8]
    }
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	e7fd      	b.n	80017be <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <xPortStartScheduler+0x138>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <xPortStartScheduler+0x138>)
 80017ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <xPortStartScheduler+0x138>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <xPortStartScheduler+0x138>)
 80017d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <xPortStartScheduler+0x13c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <xPortStartScheduler+0x13c>)
 80017e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <xPortStartScheduler+0x13c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <xPortStartScheduler+0x13c>)
 80017f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80017f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80017f8:	f000 f8e6 	bl	80019c8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <xPortStartScheduler+0x140>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001802:	f000 f905 	bl	8001a10 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <xPortStartScheduler+0x144>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <xPortStartScheduler+0x144>)
 800180c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001810:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001812:	f7ff ff61 	bl	80016d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001816:	f7ff fbab 	bl	8000f70 <vTaskSwitchContext>
    prvTaskExitError();
 800181a:	f7ff ff1b 	bl	8001654 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	410fc271 	.word	0x410fc271
 8001830:	410fc270 	.word	0x410fc270
 8001834:	e000e400 	.word	0xe000e400
 8001838:	20000134 	.word	0x20000134
 800183c:	20000138 	.word	0x20000138
 8001840:	e000ed20 	.word	0xe000ed20
 8001844:	20000004 	.word	0x20000004
 8001848:	e000ef34 	.word	0xe000ef34

0800184c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
        __asm volatile
 8001852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001856:	f383 8811 	msr	BASEPRI, r3
 800185a:	f3bf 8f6f 	isb	sy
 800185e:	f3bf 8f4f 	dsb	sy
 8001862:	607b      	str	r3, [r7, #4]
    }
 8001864:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <vPortEnterCritical+0x5c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <vPortEnterCritical+0x5c>)
 800186e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <vPortEnterCritical+0x5c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d110      	bne.n	800189a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <vPortEnterCritical+0x60>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <vPortEnterCritical+0x4e>
        __asm volatile
 8001882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	603b      	str	r3, [r7, #0]
    }
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	e7fd      	b.n	8001896 <vPortEnterCritical+0x4a>
    }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000004 	.word	0x20000004
 80018ac:	e000ed04 	.word	0xe000ed04

080018b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <vPortExitCritical+0x50>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <vPortExitCritical+0x26>
        __asm volatile
 80018be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	607b      	str	r3, [r7, #4]
    }
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <vPortExitCritical+0x50>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <vPortExitCritical+0x50>)
 80018de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80018e0:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <vPortExitCritical+0x50>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <vPortExitCritical+0x44>
 80018e8:	2300      	movs	r3, #0
 80018ea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80018f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	20000004 	.word	0x20000004
	...

08001910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001910:	f3ef 8009 	mrs	r0, PSP
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <pxCurrentTCBConst>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f01e 0f10 	tst.w	lr, #16
 8001920:	bf08      	it	eq
 8001922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192a:	6010      	str	r0, [r2, #0]
 800192c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001934:	f380 8811 	msr	BASEPRI, r0
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	f3bf 8f6f 	isb	sy
 8001940:	f7ff fb16 	bl	8000f70 <vTaskSwitchContext>
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f380 8811 	msr	BASEPRI, r0
 800194c:	bc09      	pop	{r0, r3}
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001956:	f01e 0f10 	tst.w	lr, #16
 800195a:	bf08      	it	eq
 800195c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001960:	f380 8809 	msr	PSP, r0
 8001964:	f3bf 8f6f 	isb	sy
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w

08001970 <pxCurrentTCBConst>:
 8001970:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop

08001978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */

	SEGGER_SYSVIEW_RecordEnterISR();
 800197e:	f001 fc63 	bl	8003248 <SEGGER_SYSVIEW_RecordEnterISR>
        __asm volatile
 8001982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	607b      	str	r3, [r7, #4]
    }
 8001994:	bf00      	nop
    portDISABLE_INTERRUPTS();
    {
    	traceISR_EXIT_TO_SCHEDULER();
 8001996:	f001 fcb5 	bl	8003304 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800199a:	f7ff f9cd 	bl	8000d38 <xTaskIncrementTick>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <SysTick_Handler+0x34>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <SysTick_Handler+0x4c>)
 80019a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	603b      	str	r3, [r7, #0]
        __asm volatile
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f383 8811 	msr	BASEPRI, r3
    }
 80019b6:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
    SEGGER_SYSVIEW_RecordExitISR();
 80019b8:	f001 fc88 	bl	80032cc <SEGGER_SYSVIEW_RecordExitISR>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	e000ed04 	.word	0xe000ed04

080019c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <vPortSetupTimerInterrupt+0x34>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <vPortSetupTimerInterrupt+0x38>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <vPortSetupTimerInterrupt+0x3c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <vPortSetupTimerInterrupt+0x40>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	4a09      	ldr	r2, [pc, #36]	@ (8001a0c <vPortSetupTimerInterrupt+0x44>)
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <vPortSetupTimerInterrupt+0x34>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010
 8001a00:	e000e018 	.word	0xe000e018
 8001a04:	20000008 	.word	0x20000008
 8001a08:	10624dd3 	.word	0x10624dd3
 8001a0c:	e000e014 	.word	0xe000e014

08001a10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001a10:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001a20 <vPortEnableVFP+0x10>
 8001a14:	6801      	ldr	r1, [r0, #0]
 8001a16:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001a1a:	6001      	str	r1, [r0, #0]
 8001a1c:	4770      	bx	lr
 8001a1e:	0000      	.short	0x0000
 8001a20:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop

08001a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001a2e:	f3ef 8305 	mrs	r3, IPSR
 8001a32:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	d915      	bls.n	8001a66 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001a3a:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <vPortValidateInterruptPriority+0x74>)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <vPortValidateInterruptPriority+0x78>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	7afa      	ldrb	r2, [r7, #11]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20b      	bcs.n	8001a66 <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8001a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a52:	f383 8811 	msr	BASEPRI, r3
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	f3bf 8f4f 	dsb	sy
 8001a5e:	607b      	str	r3, [r7, #4]
    }
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	e7fd      	b.n	8001a62 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <vPortValidateInterruptPriority+0x7c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <vPortValidateInterruptPriority+0x80>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90b      	bls.n	8001a8e <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8001a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	603b      	str	r3, [r7, #0]
    }
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	e7fd      	b.n	8001a8a <vPortValidateInterruptPriority+0x62>
    }
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e3f0 	.word	0xe000e3f0
 8001aa0:	20000134 	.word	0x20000134
 8001aa4:	e000ed0c 	.word	0xe000ed0c
 8001aa8:	20000138 	.word	0x20000138

08001aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001ab8:	f7ff f81e 	bl	8000af8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001abc:	4b54      	ldr	r3, [pc, #336]	@ (8001c10 <pvPortMalloc+0x164>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001ac4:	f000 f90c 	bl	8001ce0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d012      	beq.n	8001af4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001ace:	2208      	movs	r2, #8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	3308      	adds	r3, #8
 8001ada:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d804      	bhi.n	8001af0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4413      	add	r3, r2
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	e001      	b.n	8001af4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db71      	blt.n	8001bde <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d06e      	beq.n	8001bde <pvPortMalloc+0x132>
 8001b00:	4b44      	ldr	r3, [pc, #272]	@ (8001c14 <pvPortMalloc+0x168>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d869      	bhi.n	8001bde <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001b0a:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <pvPortMalloc+0x16c>)
 8001b0c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001b0e:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <pvPortMalloc+0x16c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b14:	e004      	b.n	8001b20 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d903      	bls.n	8001b32 <pvPortMalloc+0x86>
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f1      	bne.n	8001b16 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001b32:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <pvPortMalloc+0x164>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d050      	beq.n	8001bde <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	4413      	add	r3, r2
 8001b44:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	2308      	movs	r3, #8
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d920      	bls.n	8001ba0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <pvPortMalloc+0xdc>
        __asm volatile
 8001b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	613b      	str	r3, [r7, #16]
    }
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f000 f8fc 	bl	8001d98 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <pvPortMalloc+0x168>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <pvPortMalloc+0x168>)
 8001bac:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <pvPortMalloc+0x168>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <pvPortMalloc+0x170>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d203      	bcs.n	8001bc2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <pvPortMalloc+0x168>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <pvPortMalloc+0x170>)
 8001bc0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <pvPortMalloc+0x174>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <pvPortMalloc+0x174>)
 8001bdc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001bde:	f7fe ff99 	bl	8000b14 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <pvPortMalloc+0x158>
        __asm volatile
 8001bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf0:	f383 8811 	msr	BASEPRI, r3
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	60fb      	str	r3, [r7, #12]
    }
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <pvPortMalloc+0x154>
    return pvReturn;
 8001c04:	69fb      	ldr	r3, [r7, #28]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3728      	adds	r7, #40	@ 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20012d44 	.word	0x20012d44
 8001c14:	20012d48 	.word	0x20012d48
 8001c18:	20012d3c 	.word	0x20012d3c
 8001c1c:	20012d4c 	.word	0x20012d4c
 8001c20:	20012d50 	.word	0x20012d50

08001c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d04b      	beq.n	8001cce <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001c36:	2308      	movs	r3, #8
 8001c38:	425b      	negs	r3, r3
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0b      	blt.n	8001c64 <vPortFree+0x40>
        __asm volatile
 8001c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c50:	f383 8811 	msr	BASEPRI, r3
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	f3bf 8f4f 	dsb	sy
 8001c5c:	60fb      	str	r3, [r7, #12]
    }
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <vPortFree+0x60>
        __asm volatile
 8001c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	60bb      	str	r3, [r7, #8]
    }
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0fdb      	lsrs	r3, r3, #31
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01c      	beq.n	8001cce <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001ca8:	f7fe ff26 	bl	8000af8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <vPortFree+0xb4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <vPortFree+0xb4>)
 8001cb8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cba:	6938      	ldr	r0, [r7, #16]
 8001cbc:	f000 f86c 	bl	8001d98 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <vPortFree+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a05      	ldr	r2, [pc, #20]	@ (8001cdc <vPortFree+0xb8>)
 8001cc8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001cca:	f7fe ff23 	bl	8000b14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20012d48 	.word	0x20012d48
 8001cdc:	20012d54 	.word	0x20012d54

08001ce0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ce6:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001cea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <prvHeapInit+0xa4>)
 8001cee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00c      	beq.n	8001d14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <prvHeapInit+0xa4>)
 8001d10:	4413      	add	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d18:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <prvHeapInit+0xa8>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <prvHeapInit+0xa8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0307 	bic.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a13      	ldr	r2, [pc, #76]	@ (8001d8c <prvHeapInit+0xac>)
 8001d40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <prvHeapInit+0xac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <prvHeapInit+0xac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	1ad2      	subs	r2, r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <prvHeapInit+0xac>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <prvHeapInit+0xb0>)
 8001d6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <prvHeapInit+0xb4>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	2000013c 	.word	0x2000013c
 8001d88:	20012d3c 	.word	0x20012d3c
 8001d8c:	20012d44 	.word	0x20012d44
 8001d90:	20012d4c 	.word	0x20012d4c
 8001d94:	20012d48 	.word	0x20012d48

08001d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001da0:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <prvInsertBlockIntoFreeList+0xac>)
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e002      	b.n	8001dac <prvInsertBlockIntoFreeList+0x14>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d8f7      	bhi.n	8001da6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d108      	bne.n	8001dda <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	441a      	add	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	441a      	add	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d118      	bne.n	8001e20 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <prvInsertBlockIntoFreeList+0xb0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d00d      	beq.n	8001e16 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	441a      	add	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e008      	b.n	8001e28 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <prvInsertBlockIntoFreeList+0xb0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e003      	b.n	8001e28 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d002      	beq.n	8001e36 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20012d3c 	.word	0x20012d3c
 8001e48:	20012d44 	.word	0x20012d44

08001e4c <LCD_init>:
 */


#include "16x2_LCD.h"

void LCD_init(void){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	  // 4 bit initialisation
	  HAL_Delay(50);  // wait for >40ms
 8001e50:	2032      	movs	r0, #50	@ 0x32
 8001e52:	f002 f9a7 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x30);
 8001e56:	2030      	movs	r0, #48	@ 0x30
 8001e58:	f000 f832 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(5);  // wait for >4.1ms
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	f002 f9a1 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x30);
 8001e62:	2030      	movs	r0, #48	@ 0x30
 8001e64:	f000 f82c 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(1);  // wait for >100us
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f002 f99b 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x30);
 8001e6e:	2030      	movs	r0, #48	@ 0x30
 8001e70:	f000 f826 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(10);
 8001e74:	200a      	movs	r0, #10
 8001e76:	f002 f995 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x20);  // 4bit mode
 8001e7a:	2020      	movs	r0, #32
 8001e7c:	f000 f820 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(10);
 8001e80:	200a      	movs	r0, #10
 8001e82:	f002 f98f 	bl	80041a4 <HAL_Delay>

	  // display initialisation
	  LCD_send_command(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001e86:	2028      	movs	r0, #40	@ 0x28
 8001e88:	f000 f81a 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f002 f989 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001e92:	2008      	movs	r0, #8
 8001e94:	f000 f814 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(1);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f002 f983 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x01);  // clear display
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 f80e 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(2);
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f002 f97d 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001eaa:	2006      	movs	r0, #6
 8001eac:	f000 f808 	bl	8001ec0 <LCD_send_command>
	  HAL_Delay(1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f002 f977 	bl	80041a4 <HAL_Delay>
	  LCD_send_command(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001eb6:	200c      	movs	r0, #12
 8001eb8:	f000 f802 	bl	8001ec0 <LCD_send_command>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <LCD_send_command>:

void LCD_send_command(uint8_t command_to_send){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_order[4];

	/*	Extract the upper 4 bits from the command_to_send	*/
	uint8_t upper_byte = (command_to_send & 0xF0);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f023 030f 	bic.w	r3, r3, #15
 8001ed0:	73fb      	strb	r3, [r7, #15]

	/*	Extract the lower 4 bits and left shift to the upper 4, because the 0 to 3 will always be for RS, RW, E and Backlight
	 * 	as per datasheet	*/
	uint8_t lower_byte = ((command_to_send << 4) & 0xF0);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	73bb      	strb	r3, [r7, #14]

	/*	Send upperbyte with control commands, followed by lower bytes with control commands	*/
	byte_order[0] = upper_byte | COMMAND_BYTE;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	f043 030c 	orr.w	r3, r3, #12
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	723b      	strb	r3, [r7, #8]
	byte_order[1] = upper_byte | STROBE;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	727b      	strb	r3, [r7, #9]
	byte_order[2] = lower_byte | COMMAND_BYTE;
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	f043 030c 	orr.w	r3, r3, #12
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	72bb      	strb	r3, [r7, #10]
	byte_order[3] = lower_byte | STROBE;
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	72fb      	strb	r3, [r7, #11]

#ifdef CORTEX_M4
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *)byte_order, sizeof(byte_order), 5);
 8001f00:	f107 0208 	add.w	r2, r7, #8
 8001f04:	2305      	movs	r3, #5
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2304      	movs	r3, #4
 8001f0a:	214e      	movs	r1, #78	@ 0x4e
 8001f0c:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <LCD_send_command+0x5c>)
 8001f0e:	f002 fd59 	bl	80049c4 <HAL_I2C_Master_Transmit>
#endif

}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200153d0 	.word	0x200153d0

08001f20 <LCD_send_data>:

void LCD_send_data(uint8_t data_to_sent){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data_to_sent&0xf0);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f023 030f 	bic.w	r3, r3, #15
 8001f30:	73fb      	strb	r3, [r7, #15]
	data_l = ((data_to_sent<<4)&0xf0);
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f043 030d 	orr.w	r3, r3, #13
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	f043 0309 	orr.w	r3, r3, #9
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	f043 030d 	orr.w	r3, r3, #13
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	f043 0309 	orr.w	r3, r3, #9
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	72fb      	strb	r3, [r7, #11]

#ifdef CORTEX_M4
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *)data_t, sizeof(data_t), 5);
 8001f60:	f107 0208 	add.w	r2, r7, #8
 8001f64:	2305      	movs	r3, #5
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	214e      	movs	r1, #78	@ 0x4e
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <LCD_send_data+0x5c>)
 8001f6e:	f002 fd29 	bl	80049c4 <HAL_I2C_Master_Transmit>
#endif

}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200153d0 	.word	0x200153d0

08001f80 <LCD_send_string>:

void LCD_send_string(char *string_to_send){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	while(*string_to_send){
 8001f88:	e006      	b.n	8001f98 <LCD_send_string+0x18>
		LCD_send_data(*string_to_send++);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ffc4 	bl	8001f20 <LCD_send_data>
	while(*string_to_send){
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f4      	bne.n	8001f8a <LCD_send_string+0xa>
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001fb0:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <_cbSendSystemDesc+0x14>)
 8001fb2:	f001 f8f3 	bl	800319c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001fb6:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <_cbSendSystemDesc+0x18>)
 8001fb8:	f001 f8f0 	bl	800319c <SEGGER_SYSVIEW_SendSysDesc>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	0800631c 	.word	0x0800631c
 8001fc4:	08006358 	.word	0x08006358

08001fc8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <SEGGER_SYSVIEW_Conf+0x20>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <SEGGER_SYSVIEW_Conf+0x20>)
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <SEGGER_SYSVIEW_Conf+0x24>)
 8001fd6:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <SEGGER_SYSVIEW_Conf+0x28>)
 8001fd8:	f000 fd66 	bl	8002aa8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001fdc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001fe0:	f000 fda6 	bl	8002b30 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	08001fad 	.word	0x08001fad
 8001ff0:	080064b8 	.word	0x080064b8

08001ff4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	e033      	b.n	8002068 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002000:	491e      	ldr	r1, [pc, #120]	@ (800207c <_cbSendTaskList+0x88>)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	491a      	ldr	r1, [pc, #104]	@ (800207c <_cbSendTaskList+0x88>)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3304      	adds	r3, #4
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	4c16      	ldr	r4, [pc, #88]	@ (800207c <_cbSendTaskList+0x88>)
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4423      	add	r3, r4
 8002030:	3308      	adds	r3, #8
 8002032:	681c      	ldr	r4, [r3, #0]
 8002034:	4d11      	ldr	r5, [pc, #68]	@ (800207c <_cbSendTaskList+0x88>)
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	442b      	add	r3, r5
 8002042:	330c      	adds	r3, #12
 8002044:	681d      	ldr	r5, [r3, #0]
 8002046:	4e0d      	ldr	r6, [pc, #52]	@ (800207c <_cbSendTaskList+0x88>)
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4433      	add	r3, r6
 8002054:	3310      	adds	r3, #16
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	462b      	mov	r3, r5
 800205c:	4622      	mov	r2, r4
 800205e:	f000 f8bd 	bl	80021dc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3301      	adds	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <_cbSendTaskList+0x8c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3c6      	bcc.n	8002000 <_cbSendTaskList+0xc>
  }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	20012d58 	.word	0x20012d58
 8002080:	20012df8 	.word	0x20012df8

08002084 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800208c:	f7fe fe42 	bl	8000d14 <xTaskGetTickCountFromISR>
 8002090:	4603      	mov	r3, r0
 8002092:	2200      	movs	r2, #0
 8002094:	469a      	mov	sl, r3
 8002096:	4693      	mov	fp, r2
 8002098:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800209c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	f04f 0a00 	mov.w	sl, #0
 80020a8:	f04f 0b00 	mov.w	fp, #0
 80020ac:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80020b0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80020b4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80020b8:	4652      	mov	r2, sl
 80020ba:	465b      	mov	r3, fp
 80020bc:	1a14      	subs	r4, r2, r0
 80020be:	eb63 0501 	sbc.w	r5, r3, r1
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	00ab      	lsls	r3, r5, #2
 80020cc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80020d0:	00a2      	lsls	r2, r4, #2
 80020d2:	4614      	mov	r4, r2
 80020d4:	461d      	mov	r5, r3
 80020d6:	eb14 0800 	adds.w	r8, r4, r0
 80020da:	eb45 0901 	adc.w	r9, r5, r1
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020f2:	4690      	mov	r8, r2
 80020f4:	4699      	mov	r9, r3
 80020f6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80020fa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800210c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800211a:	2205      	movs	r2, #5
 800211c:	492b      	ldr	r1, [pc, #172]	@ (80021cc <SYSVIEW_AddTask+0xc0>)
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f004 f8a2 	bl	8006268 <memcmp>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d04b      	beq.n	80021c2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800212a:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b07      	cmp	r3, #7
 8002130:	d903      	bls.n	800213a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002132:	4828      	ldr	r0, [pc, #160]	@ (80021d4 <SYSVIEW_AddTask+0xc8>)
 8002134:	f001 faca 	bl	80036cc <SEGGER_SYSVIEW_Warn>
    return;
 8002138:	e044      	b.n	80021c4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800213a:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4926      	ldr	r1, [pc, #152]	@ (80021d8 <SYSVIEW_AddTask+0xcc>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800214e:	4b20      	ldr	r3, [pc, #128]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4921      	ldr	r1, [pc, #132]	@ (80021d8 <SYSVIEW_AddTask+0xcc>)
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3304      	adds	r3, #4
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	491b      	ldr	r1, [pc, #108]	@ (80021d8 <SYSVIEW_AddTask+0xcc>)
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3308      	adds	r3, #8
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4916      	ldr	r1, [pc, #88]	@ (80021d8 <SYSVIEW_AddTask+0xcc>)
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	330c      	adds	r3, #12
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4910      	ldr	r1, [pc, #64]	@ (80021d8 <SYSVIEW_AddTask+0xcc>)
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3310      	adds	r3, #16
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	4a08      	ldr	r2, [pc, #32]	@ (80021d0 <SYSVIEW_AddTask+0xc4>)
 80021ae:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f80e 	bl	80021dc <SYSVIEW_SendTaskInfo>
 80021c0:	e000      	b.n	80021c4 <SYSVIEW_AddTask+0xb8>
    return;
 80021c2:	bf00      	nop

}
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	08006368 	.word	0x08006368
 80021d0:	20012df8 	.word	0x20012df8
 80021d4:	08006370 	.word	0x08006370
 80021d8:	20012d58 	.word	0x20012d58

080021dc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	2218      	movs	r2, #24
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 f848 	bl	8006288 <memset>
  TaskInfo.TaskID     = TaskID;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8002208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fecb 	bl	8002fac <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	@ 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <_DoInit+0xa0>)
 8002228:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800222a:	22a8      	movs	r2, #168	@ 0xa8
 800222c:	2100      	movs	r1, #0
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f004 f82a 	bl	8006288 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2203      	movs	r2, #3
 8002238:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2203      	movs	r2, #3
 800223e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4a20      	ldr	r2, [pc, #128]	@ (80022c4 <_DoInit+0xa4>)
 8002244:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <_DoInit+0xa8>)
 800224a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002252:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4a16      	ldr	r2, [pc, #88]	@ (80022c4 <_DoInit+0xa4>)
 800226a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <_DoInit+0xac>)
 8002270:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2210      	movs	r2, #16
 8002276:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800228a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	e00c      	b.n	80022ae <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1c3 030f 	rsb	r3, r3, #15
 800229a:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <_DoInit+0xb0>)
 800229c:	5cd1      	ldrb	r1, [r2, r3]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	460a      	mov	r2, r1
 80022a6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3301      	adds	r3, #1
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d9ef      	bls.n	8002294 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80022b4:	f3bf 8f5f 	dmb	sy
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20012dfc 	.word	0x20012dfc
 80022c4:	080063c0 	.word	0x080063c0
 80022c8:	20012ea4 	.word	0x20012ea4
 80022cc:	200132a4 	.word	0x200132a4
 80022d0:	080064c0 	.word	0x080064c0

080022d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	@ 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80022e0:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <SEGGER_RTT_ReadNoLock+0x108>)
 80022e2:	623b      	str	r3, [r7, #32]
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b53      	cmp	r3, #83	@ 0x53
 80022ec:	d001      	beq.n	80022f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80022ee:	f7ff ff97 	bl	8002220 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	3360      	adds	r3, #96	@ 0x60
 80022fe:	4a37      	ldr	r2, [pc, #220]	@ (80023dc <SEGGER_RTT_ReadNoLock+0x108>)
 8002300:	4413      	add	r3, r2
 8002302:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d92b      	bls.n	8002378 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4293      	cmp	r3, r2
 8002330:	bf28      	it	cs
 8002332:	4613      	movcs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	4413      	add	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	6939      	ldr	r1, [r7, #16]
 8002344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002346:	f003 ffcb 	bl	80062e0 <memcpy>
    NumBytesRead += NumBytesRem;
 800234a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4413      	add	r3, r2
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	4413      	add	r3, r2
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	4413      	add	r3, r2
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002370:	429a      	cmp	r2, r3
 8002372:	d101      	bne.n	8002378 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002374:	2300      	movs	r3, #0
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4293      	cmp	r3, r2
 8002386:	bf28      	it	cs
 8002388:	4613      	movcs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d019      	beq.n	80023c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002398:	4413      	add	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6939      	ldr	r1, [r7, #16]
 80023a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023a2:	f003 ff9d 	bl	80062e0 <memcpy>
    NumBytesRead += NumBytesRem;
 80023a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4413      	add	r3, r2
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80023ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4413      	add	r3, r2
 80023c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80023c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3730      	adds	r7, #48	@ 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20012dfc 	.word	0x20012dfc

080023e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80023ee:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b53      	cmp	r3, #83	@ 0x53
 80023fa:	d001      	beq.n	8002400 <SEGGER_RTT_AllocUpBuffer+0x20>
 80023fc:	f7ff ff10 	bl	8002220 <_DoInit>
  SEGGER_RTT_LOCK();
 8002400:	f3ef 8311 	mrs	r3, BASEPRI
 8002404:	f04f 0120 	mov.w	r1, #32
 8002408:	f381 8811 	msr	BASEPRI, r1
 800240c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800240e:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002410:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002416:	6939      	ldr	r1, [r7, #16]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbeb      	blt.n	8002416 <SEGGER_RTT_AllocUpBuffer+0x36>
 800243e:	e000      	b.n	8002442 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002440:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	da3f      	bge.n	80024cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800244c:	6939      	ldr	r1, [r7, #16]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002460:	6939      	ldr	r1, [r7, #16]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	3304      	adds	r3, #4
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002476:	6939      	ldr	r1, [r7, #16]
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3320      	adds	r3, #32
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800248a:	6939      	ldr	r1, [r7, #16]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3328      	adds	r3, #40	@ 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800249e:	6939      	ldr	r1, [r7, #16]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3324      	adds	r3, #36	@ 0x24
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	332c      	adds	r3, #44	@ 0x2c
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80024c6:	f3bf 8f5f 	dmb	sy
 80024ca:	e002      	b.n	80024d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80024d8:	69fb      	ldr	r3, [r7, #28]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20012dfc 	.word	0x20012dfc

080024e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80024f6:	4b21      	ldr	r3, [pc, #132]	@ (800257c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b53      	cmp	r3, #83	@ 0x53
 8002502:	d001      	beq.n	8002508 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002504:	f7ff fe8c 	bl	8002220 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800250a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d82c      	bhi.n	800256c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002512:	f3ef 8311 	mrs	r3, BASEPRI
 8002516:	f04f 0120 	mov.w	r1, #32
 800251a:	f381 8811 	msr	BASEPRI, r1
 800251e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	3360      	adds	r3, #96	@ 0x60
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800255a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800255c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
 800256a:	e002      	b.n	8002572 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	@ 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20012dfc 	.word	0x20012dfc

08002580 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	60fa      	str	r2, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	e022      	b.n	80025e4 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	60fa      	str	r2, [r7, #12]
 80025a8:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b80      	cmp	r3, #128	@ 0x80
 80025ae:	d90a      	bls.n	80025c6 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80025b4:	e007      	b.n	80025c6 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	1c53      	adds	r3, r2, #1
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	60f9      	str	r1, [r7, #12]
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <_EncodeStr+0x58>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3307      	adds	r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002612:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <_HandleIncomingPacket+0xd8>)
 8002614:	7e1b      	ldrb	r3, [r3, #24]
 8002616:	4618      	mov	r0, r3
 8002618:	1cfb      	adds	r3, r7, #3
 800261a:	2201      	movs	r2, #1
 800261c:	4619      	mov	r1, r3
 800261e:	f7ff fe59 	bl	80022d4 <SEGGER_RTT_ReadNoLock>
 8002622:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d057      	beq.n	80026da <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	2b80      	cmp	r3, #128	@ 0x80
 800262e:	d031      	beq.n	8002694 <_HandleIncomingPacket+0x88>
 8002630:	2b80      	cmp	r3, #128	@ 0x80
 8002632:	dc40      	bgt.n	80026b6 <_HandleIncomingPacket+0xaa>
 8002634:	2b07      	cmp	r3, #7
 8002636:	dc15      	bgt.n	8002664 <_HandleIncomingPacket+0x58>
 8002638:	2b00      	cmp	r3, #0
 800263a:	dd3c      	ble.n	80026b6 <_HandleIncomingPacket+0xaa>
 800263c:	3b01      	subs	r3, #1
 800263e:	2b06      	cmp	r3, #6
 8002640:	d839      	bhi.n	80026b6 <_HandleIncomingPacket+0xaa>
 8002642:	a201      	add	r2, pc, #4	@ (adr r2, 8002648 <_HandleIncomingPacket+0x3c>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	0800266b 	.word	0x0800266b
 800264c:	08002671 	.word	0x08002671
 8002650:	08002677 	.word	0x08002677
 8002654:	0800267d 	.word	0x0800267d
 8002658:	08002683 	.word	0x08002683
 800265c:	08002689 	.word	0x08002689
 8002660:	0800268f 	.word	0x0800268f
 8002664:	2b7f      	cmp	r3, #127	@ 0x7f
 8002666:	d033      	beq.n	80026d0 <_HandleIncomingPacket+0xc4>
 8002668:	e025      	b.n	80026b6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800266a:	f000 fb25 	bl	8002cb8 <SEGGER_SYSVIEW_Start>
      break;
 800266e:	e034      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002670:	f000 fbdc 	bl	8002e2c <SEGGER_SYSVIEW_Stop>
      break;
 8002674:	e031      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002676:	f000 fdb5 	bl	80031e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800267a:	e02e      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800267c:	f000 fd7a 	bl	8003174 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002680:	e02b      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002682:	f000 fbf9 	bl	8002e78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002686:	e028      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002688:	f000 ffe2 	bl	8003650 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800268c:	e025      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800268e:	f000 ffc1 	bl	8003614 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002692:	e022      	b.n	80026da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <_HandleIncomingPacket+0xd8>)
 8002696:	7e1b      	ldrb	r3, [r3, #24]
 8002698:	4618      	mov	r0, r3
 800269a:	1cfb      	adds	r3, r7, #3
 800269c:	2201      	movs	r2, #1
 800269e:	4619      	mov	r1, r3
 80026a0:	f7ff fe18 	bl	80022d4 <SEGGER_RTT_ReadNoLock>
 80026a4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 ff26 	bl	8003500 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80026b4:	e00e      	b.n	80026d4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da0c      	bge.n	80026d8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80026be:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <_HandleIncomingPacket+0xd8>)
 80026c0:	7e1b      	ldrb	r3, [r3, #24]
 80026c2:	4618      	mov	r0, r3
 80026c4:	1cfb      	adds	r3, r7, #3
 80026c6:	2201      	movs	r2, #1
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7ff fe03 	bl	80022d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80026ce:	e003      	b.n	80026d8 <_HandleIncomingPacket+0xcc>
      break;
 80026d0:	bf00      	nop
 80026d2:	e002      	b.n	80026da <_HandleIncomingPacket+0xce>
      break;
 80026d4:	bf00      	nop
 80026d6:	e000      	b.n	80026da <_HandleIncomingPacket+0xce>
      break;
 80026d8:	bf00      	nop
    }
  }
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200152bc 	.word	0x200152bc

080026e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	@ 0x30
 80026ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80026ee:	2301      	movs	r3, #1
 80026f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026fc:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002702:	e00b      	b.n	800271c <_TrySendOverflowPacket+0x34>
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	b2da      	uxtb	r2, r3
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	1c59      	adds	r1, r3, #1
 800270c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800270e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	09db      	lsrs	r3, r3, #7
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002720:	d8f0      	bhi.n	8002704 <_TrySendOverflowPacket+0x1c>
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002730:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002732:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <_TrySendOverflowPacket+0xe0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002738:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	e00b      	b.n	8002764 <_TrySendOverflowPacket+0x7c>
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	6279      	str	r1, [r7, #36]	@ 0x24
 8002756:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	09db      	lsrs	r3, r3, #7
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b7f      	cmp	r3, #127	@ 0x7f
 8002768:	d8f0      	bhi.n	800274c <_TrySendOverflowPacket+0x64>
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	4618      	mov	r0, r3
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	461a      	mov	r2, r3
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4619      	mov	r1, r3
 800278c:	f7fd fd40 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002790:	4603      	mov	r3, r0
 8002792:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e004      	b.n	80027b8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a03      	ldr	r2, [pc, #12]	@ (80027c4 <_TrySendOverflowPacket+0xdc>)
 80027b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80027b8:	693b      	ldr	r3, [r7, #16]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3730      	adds	r7, #48	@ 0x30
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200152bc 	.word	0x200152bc
 80027c8:	e0001004 	.word	0xe0001004

080027cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	@ 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80027d8:	4b98      	ldr	r3, [pc, #608]	@ (8002a3c <_SendPacket+0x270>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d010      	beq.n	8002802 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80027e0:	4b96      	ldr	r3, [pc, #600]	@ (8002a3c <_SendPacket+0x270>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 812d 	beq.w	8002a44 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80027ea:	4b94      	ldr	r3, [pc, #592]	@ (8002a3c <_SendPacket+0x270>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d109      	bne.n	8002806 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80027f2:	f7ff ff79 	bl	80026e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80027f6:	4b91      	ldr	r3, [pc, #580]	@ (8002a3c <_SendPacket+0x270>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 8124 	bne.w	8002a48 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8002800:	e001      	b.n	8002806 <_SendPacket+0x3a>
    goto Send;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <_SendPacket+0x3c>
Send:
 8002806:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b1f      	cmp	r3, #31
 800280c:	d809      	bhi.n	8002822 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800280e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a3c <_SendPacket+0x270>)
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 8115 	bne.w	8002a4c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b17      	cmp	r3, #23
 8002826:	d807      	bhi.n	8002838 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3b01      	subs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e0c4      	b.n	80029c2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b7f      	cmp	r3, #127	@ 0x7f
 8002844:	d912      	bls.n	800286c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	09da      	lsrs	r2, r3, #7
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b01      	subs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	3a01      	subs	r2, #1
 800285e:	60fa      	str	r2, [r7, #12]
 8002860:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e006      	b.n	800287a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3b01      	subs	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b7e      	cmp	r3, #126	@ 0x7e
 800287e:	d807      	bhi.n	8002890 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b01      	subs	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e098      	b.n	80029c2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002896:	d212      	bcs.n	80028be <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	09da      	lsrs	r2, r3, #7
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	3a01      	subs	r2, #1
 80028b0:	60fa      	str	r2, [r7, #12]
 80028b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e081      	b.n	80029c2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028c4:	d21d      	bcs.n	8002902 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0b9a      	lsrs	r2, r3, #14
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	09db      	lsrs	r3, r3, #7
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	3a01      	subs	r2, #1
 80028e0:	60fa      	str	r2, [r7, #12]
 80028e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	3a01      	subs	r2, #1
 80028f4:	60fa      	str	r2, [r7, #12]
 80028f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e05f      	b.n	80029c2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002908:	d228      	bcs.n	800295c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0d5a      	lsrs	r2, r3, #21
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b01      	subs	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0b9b      	lsrs	r3, r3, #14
 800291e:	b2db      	uxtb	r3, r3
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	3a01      	subs	r2, #1
 8002924:	60fa      	str	r2, [r7, #12]
 8002926:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	09db      	lsrs	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	3a01      	subs	r2, #1
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	3a01      	subs	r2, #1
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e032      	b.n	80029c2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0f1a      	lsrs	r2, r3, #28
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3b01      	subs	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0d5b      	lsrs	r3, r3, #21
 8002970:	b2db      	uxtb	r3, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	3a01      	subs	r2, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0b9b      	lsrs	r3, r3, #14
 8002986:	b2db      	uxtb	r3, r3
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	3a01      	subs	r2, #1
 800298c:	60fa      	str	r2, [r7, #12]
 800298e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	09db      	lsrs	r3, r3, #7
 800299c:	b2db      	uxtb	r3, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	3a01      	subs	r2, #1
 80029a2:	60fa      	str	r2, [r7, #12]
 80029a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	3a01      	subs	r2, #1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <_SendPacket+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80029c8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <_SendPacket+0x270>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	e00b      	b.n	80029f4 <_SendPacket+0x228>
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80029e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	09db      	lsrs	r3, r3, #7
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80029f8:	d8f0      	bhi.n	80029dc <_SendPacket+0x210>
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <_SendPacket+0x270>)
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	f7fd fbf9 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002a1e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <_SendPacket+0x270>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	60d3      	str	r3, [r2, #12]
 8002a2c:	e00f      	b.n	8002a4e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a2e:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <_SendPacket+0x270>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b01      	ldr	r3, [pc, #4]	@ (8002a3c <_SendPacket+0x270>)
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e008      	b.n	8002a4e <_SendPacket+0x282>
 8002a3c:	200152bc 	.word	0x200152bc
 8002a40:	e0001004 	.word	0xe0001004
    goto SendDone;
 8002a44:	bf00      	nop
 8002a46:	e002      	b.n	8002a4e <_SendPacket+0x282>
      goto SendDone;
 8002a48:	bf00      	nop
 8002a4a:	e000      	b.n	8002a4e <_SendPacket+0x282>
      goto SendDone;
 8002a4c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <_SendPacket+0x2d4>)
 8002a50:	7e1b      	ldrb	r3, [r3, #24]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <_SendPacket+0x2d8>)
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	336c      	adds	r3, #108	@ 0x6c
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <_SendPacket+0x2d4>)
 8002a66:	7e1b      	ldrb	r3, [r3, #24]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	490e      	ldr	r1, [pc, #56]	@ (8002aa4 <_SendPacket+0x2d8>)
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4403      	add	r3, r0
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	3370      	adds	r3, #112	@ 0x70
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d00b      	beq.n	8002a96 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <_SendPacket+0x2d4>)
 8002a80:	789b      	ldrb	r3, [r3, #2]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <_SendPacket+0x2d4>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a8c:	f7ff fdbe 	bl	800260c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <_SendPacket+0x2d4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	@ 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200152bc 	.word	0x200152bc
 8002aa4:	20012dfc 	.word	0x20012dfc

08002aa8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002abc:	4917      	ldr	r1, [pc, #92]	@ (8002b1c <SEGGER_SYSVIEW_Init+0x74>)
 8002abe:	4818      	ldr	r0, [pc, #96]	@ (8002b20 <SEGGER_SYSVIEW_Init+0x78>)
 8002ac0:	f7ff fc8e 	bl	80023e0 <SEGGER_RTT_AllocUpBuffer>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002aca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002ace:	785a      	ldrb	r2, [r3, #1]
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002ad2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002ad6:	7e1b      	ldrb	r3, [r3, #24]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2308      	movs	r3, #8
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <SEGGER_SYSVIEW_Init+0x80>)
 8002ae2:	490f      	ldr	r1, [pc, #60]	@ (8002b20 <SEGGER_SYSVIEW_Init+0x78>)
 8002ae4:	f7ff fd00 	bl	80024e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002aee:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <SEGGER_SYSVIEW_Init+0x84>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002af4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002af6:	4a0b      	ldr	r2, [pc, #44]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002afc:	4a09      	ldr	r2, [pc, #36]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002b02:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002b08:	4a06      	ldr	r2, [pc, #24]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <SEGGER_SYSVIEW_Init+0x7c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200132b4 	.word	0x200132b4
 8002b20:	080063d4 	.word	0x080063d4
 8002b24:	200152bc 	.word	0x200152bc
 8002b28:	200152b4 	.word	0x200152b4
 8002b2c:	e0001004 	.word	0xe0001004

08002b30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002b38:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6113      	str	r3, [r2, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	200152bc 	.word	0x200152bc

08002b50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002b58:	f3ef 8311 	mrs	r3, BASEPRI
 8002b5c:	f04f 0120 	mov.w	r1, #32
 8002b60:	f381 8811 	msr	BASEPRI, r1
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4808      	ldr	r0, [pc, #32]	@ (8002b88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002b68:	f7ff fd43 	bl	80025f2 <_PreparePacket>
 8002b6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68b8      	ldr	r0, [r7, #8]
 8002b74:	f7ff fe2a 	bl	80027cc <_SendPacket>
  RECORD_END();
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f383 8811 	msr	BASEPRI, r3
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200152ec 	.word	0x200152ec

08002b8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b96:	f3ef 8311 	mrs	r3, BASEPRI
 8002b9a:	f04f 0120 	mov.w	r1, #32
 8002b9e:	f381 8811 	msr	BASEPRI, r1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	4816      	ldr	r0, [pc, #88]	@ (8002c00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002ba6:	f7ff fd24 	bl	80025f2 <_PreparePacket>
 8002baa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	e00b      	b.n	8002bd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	1c59      	adds	r1, r3, #1
 8002bc2:	61f9      	str	r1, [r7, #28]
 8002bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	09db      	lsrs	r3, r3, #7
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd6:	d8f0      	bhi.n	8002bba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	61fa      	str	r2, [r7, #28]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	6938      	ldr	r0, [r7, #16]
 8002bee:	f7ff fded 	bl	80027cc <_SendPacket>
  RECORD_END();
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f383 8811 	msr	BASEPRI, r3
}
 8002bf8:	bf00      	nop
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200152ec 	.word	0x200152ec

08002c04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	@ 0x30
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c10:	f3ef 8311 	mrs	r3, BASEPRI
 8002c14:	f04f 0120 	mov.w	r1, #32
 8002c18:	f381 8811 	msr	BASEPRI, r1
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4825      	ldr	r0, [pc, #148]	@ (8002cb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002c20:	f7ff fce7 	bl	80025f2 <_PreparePacket>
 8002c24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c32:	e00b      	b.n	8002c4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	1c59      	adds	r1, r3, #1
 8002c3c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002c3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	09db      	lsrs	r3, r3, #7
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c50:	d8f0      	bhi.n	8002c34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	e00b      	b.n	8002c84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	1c59      	adds	r1, r3, #1
 8002c74:	6279      	str	r1, [r7, #36]	@ 0x24
 8002c76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	09db      	lsrs	r3, r3, #7
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c88:	d8f0      	bhi.n	8002c6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	69b8      	ldr	r0, [r7, #24]
 8002ca0:	f7ff fd94 	bl	80027cc <_SendPacket>
  RECORD_END();
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f383 8811 	msr	BASEPRI, r3
}
 8002caa:	bf00      	nop
 8002cac:	3730      	adds	r7, #48	@ 0x30
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200152ec 	.word	0x200152ec

08002cb8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	@ 0x30
 8002cbc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002cbe:	4b58      	ldr	r3, [pc, #352]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8002cc8:	f04f 0120 	mov.w	r1, #32
 8002ccc:	f381 8811 	msr	BASEPRI, r1
 8002cd0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002cd2:	4b53      	ldr	r3, [pc, #332]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	220a      	movs	r2, #10
 8002cd8:	4952      	ldr	r1, [pc, #328]	@ (8002e24 <SEGGER_SYSVIEW_Start+0x16c>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fa98 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002ce6:	200a      	movs	r0, #10
 8002ce8:	f7ff ff32 	bl	8002b50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002cec:	f3ef 8311 	mrs	r3, BASEPRI
 8002cf0:	f04f 0120 	mov.w	r1, #32
 8002cf4:	f381 8811 	msr	BASEPRI, r1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	484b      	ldr	r0, [pc, #300]	@ (8002e28 <SEGGER_SYSVIEW_Start+0x170>)
 8002cfc:	f7ff fc79 	bl	80025f2 <_PreparePacket>
 8002d00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d0a:	4b45      	ldr	r3, [pc, #276]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d10:	e00b      	b.n	8002d2a <SEGGER_SYSVIEW_Start+0x72>
 8002d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d18:	1c59      	adds	r1, r3, #1
 8002d1a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002d1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	09db      	lsrs	r3, r3, #7
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d2e:	d8f0      	bhi.n	8002d12 <SEGGER_SYSVIEW_Start+0x5a>
 8002d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d44:	4b36      	ldr	r3, [pc, #216]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	e00b      	b.n	8002d64 <SEGGER_SYSVIEW_Start+0xac>
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	6279      	str	r1, [r7, #36]	@ 0x24
 8002d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	09db      	lsrs	r3, r3, #7
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d68:	d8f0      	bhi.n	8002d4c <SEGGER_SYSVIEW_Start+0x94>
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e00b      	b.n	8002d9e <SEGGER_SYSVIEW_Start+0xe6>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	61f9      	str	r1, [r7, #28]
 8002d90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	09db      	lsrs	r3, r3, #7
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002da2:	d8f0      	bhi.n	8002d86 <SEGGER_SYSVIEW_Start+0xce>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	e00b      	b.n	8002dd6 <SEGGER_SYSVIEW_Start+0x11e>
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	6179      	str	r1, [r7, #20]
 8002dc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	09db      	lsrs	r3, r3, #7
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dda:	d8f0      	bhi.n	8002dbe <SEGGER_SYSVIEW_Start+0x106>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	617a      	str	r2, [r7, #20]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002dec:	2218      	movs	r2, #24
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fceb 	bl	80027cc <_SendPacket>
      RECORD_END();
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002dfc:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <SEGGER_SYSVIEW_Start+0x168>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002e0a:	f000 f9eb 	bl	80031e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002e0e:	f000 f9b1 	bl	8003174 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002e12:	f000 fc1d 	bl	8003650 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002e16:	bf00      	nop
 8002e18:	3730      	adds	r7, #48	@ 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200152bc 	.word	0x200152bc
 8002e24:	080064d4 	.word	0x080064d4
 8002e28:	200152ec 	.word	0x200152ec

08002e2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e32:	f3ef 8311 	mrs	r3, BASEPRI
 8002e36:	f04f 0120 	mov.w	r1, #32
 8002e3a:	f381 8811 	msr	BASEPRI, r1
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	480b      	ldr	r0, [pc, #44]	@ (8002e70 <SEGGER_SYSVIEW_Stop+0x44>)
 8002e42:	f7ff fbd6 	bl	80025f2 <_PreparePacket>
 8002e46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002e48:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002e50:	220b      	movs	r2, #11
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	6838      	ldr	r0, [r7, #0]
 8002e56:	f7ff fcb9 	bl	80027cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f383 8811 	msr	BASEPRI, r3
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200152ec 	.word	0x200152ec
 8002e74:	200152bc 	.word	0x200152bc

08002e78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	@ 0x30
 8002e7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e82:	f04f 0120 	mov.w	r1, #32
 8002e86:	f381 8811 	msr	BASEPRI, r1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	4845      	ldr	r0, [pc, #276]	@ (8002fa4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002e8e:	f7ff fbb0 	bl	80025f2 <_PreparePacket>
 8002e92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9c:	4b42      	ldr	r3, [pc, #264]	@ (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea2:	e00b      	b.n	8002ebc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002eae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	09db      	lsrs	r3, r3, #7
 8002eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ec0:	d8f0      	bhi.n	8002ea4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	e00b      	b.n	8002ef6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	1c59      	adds	r1, r3, #1
 8002ee6:	6279      	str	r1, [r7, #36]	@ 0x24
 8002ee8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	09db      	lsrs	r3, r3, #7
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002efa:	d8f0      	bhi.n	8002ede <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e00b      	b.n	8002f30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	61f9      	str	r1, [r7, #28]
 8002f22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	09db      	lsrs	r3, r3, #7
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f34:	d8f0      	bhi.n	8002f18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	61fa      	str	r2, [r7, #28]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e00b      	b.n	8002f68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	6179      	str	r1, [r7, #20]
 8002f5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	09db      	lsrs	r3, r3, #7
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f6c:	d8f0      	bhi.n	8002f50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	617a      	str	r2, [r7, #20]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002f7e:	2218      	movs	r2, #24
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f7ff fc22 	bl	80027cc <_SendPacket>
  RECORD_END();
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	4798      	blx	r3
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3730      	adds	r7, #48	@ 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200152ec 	.word	0x200152ec
 8002fa8:	200152bc 	.word	0x200152bc

08002fac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b092      	sub	sp, #72	@ 0x48
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb8:	f04f 0120 	mov.w	r1, #32
 8002fbc:	f381 8811 	msr	BASEPRI, r1
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	486a      	ldr	r0, [pc, #424]	@ (800316c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002fc4:	f7ff fb15 	bl	80025f2 <_PreparePacket>
 8002fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b66      	ldr	r3, [pc, #408]	@ (8003170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fde:	e00b      	b.n	8002ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	6479      	str	r1, [r7, #68]	@ 0x44
 8002fea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff4:	09db      	lsrs	r3, r3, #7
 8002ff6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ffc:	d8f0      	bhi.n	8002fe0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8002ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	647a      	str	r2, [r7, #68]	@ 0x44
 8003004:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800300c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003018:	e00b      	b.n	8003032 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301c:	b2da      	uxtb	r2, r3
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003024:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302e:	09db      	lsrs	r3, r3, #7
 8003030:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	2b7f      	cmp	r3, #127	@ 0x7f
 8003036:	d8f0      	bhi.n	800301a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800303e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003046:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	4619      	mov	r1, r3
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff fa95 	bl	8002580 <_EncodeStr>
 8003056:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003058:	2209      	movs	r2, #9
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	6938      	ldr	r0, [r7, #16]
 800305e:	f7ff fbb5 	bl	80027cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b40      	ldr	r3, [pc, #256]	@ (8003170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	633b      	str	r3, [r7, #48]	@ 0x30
 8003076:	e00b      	b.n	8003090 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	b2da      	uxtb	r2, r3
 800307c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	6379      	str	r1, [r7, #52]	@ 0x34
 8003082:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	09db      	lsrs	r3, r3, #7
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003092:	2b7f      	cmp	r3, #127	@ 0x7f
 8003094:	d8f0      	bhi.n	8003078 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	637a      	str	r2, [r7, #52]	@ 0x34
 800309c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030b0:	e00b      	b.n	80030ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b8:	1c59      	adds	r1, r3, #1
 80030ba:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80030bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	09db      	lsrs	r3, r3, #7
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80030ce:	d8f0      	bhi.n	80030b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	623b      	str	r3, [r7, #32]
 80030ea:	e00b      	b.n	8003104 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80030f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	09db      	lsrs	r3, r3, #7
 8003102:	623b      	str	r3, [r7, #32]
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2b7f      	cmp	r3, #127	@ 0x7f
 8003108:	d8f0      	bhi.n	80030ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e00b      	b.n	800313e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	61f9      	str	r1, [r7, #28]
 8003130:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	09db      	lsrs	r3, r3, #7
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b7f      	cmp	r3, #127	@ 0x7f
 8003142:	d8f0      	bhi.n	8003126 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003154:	2215      	movs	r2, #21
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	6938      	ldr	r0, [r7, #16]
 800315a:	f7ff fb37 	bl	80027cc <_SendPacket>
  RECORD_END();
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f383 8811 	msr	BASEPRI, r3
}
 8003164:	bf00      	nop
 8003166:	3748      	adds	r7, #72	@ 0x48
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200152ec 	.word	0x200152ec
 8003170:	200152bc 	.word	0x200152bc

08003174 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003178:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800318a:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4798      	blx	r3
  }
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200152bc 	.word	0x200152bc

0800319c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031a4:	f3ef 8311 	mrs	r3, BASEPRI
 80031a8:	f04f 0120 	mov.w	r1, #32
 80031ac:	f381 8811 	msr	BASEPRI, r1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	480b      	ldr	r0, [pc, #44]	@ (80031e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80031b4:	f7ff fa1d 	bl	80025f2 <_PreparePacket>
 80031b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	6938      	ldr	r0, [r7, #16]
 80031c0:	f7ff f9de 	bl	8002580 <_EncodeStr>
 80031c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80031c6:	220e      	movs	r2, #14
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	6938      	ldr	r0, [r7, #16]
 80031cc:	f7ff fafe 	bl	80027cc <_SendPacket>
  RECORD_END();
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f383 8811 	msr	BASEPRI, r3
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200152ec 	.word	0x200152ec

080031e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01a      	beq.n	8003228 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80031f2:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4798      	blx	r3
 8003204:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003208:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800320a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	000a      	movs	r2, r1
 8003218:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800321a:	4613      	mov	r3, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4621      	mov	r1, r4
 8003220:	200d      	movs	r0, #13
 8003222:	f7ff fcef 	bl	8002c04 <SEGGER_SYSVIEW_RecordU32x2>
 8003226:	e006      	b.n	8003236 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	200c      	movs	r0, #12
 8003230:	f7ff fcac 	bl	8002b8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	200152bc 	.word	0x200152bc
 8003244:	e0001004 	.word	0xe0001004

08003248 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800324e:	f3ef 8311 	mrs	r3, BASEPRI
 8003252:	f04f 0120 	mov.w	r1, #32
 8003256:	f381 8811 	msr	BASEPRI, r1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	4819      	ldr	r0, [pc, #100]	@ (80032c4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800325e:	f7ff f9c8 	bl	80025f2 <_PreparePacket>
 8003262:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003268:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	e00b      	b.n	8003294 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	6179      	str	r1, [r7, #20]
 8003286:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	09db      	lsrs	r3, r3, #7
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b7f      	cmp	r3, #127	@ 0x7f
 8003298:	d8f0      	bhi.n	800327c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	617a      	str	r2, [r7, #20]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80032aa:	2202      	movs	r2, #2
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68b8      	ldr	r0, [r7, #8]
 80032b0:	f7ff fa8c 	bl	80027cc <_SendPacket>
  RECORD_END();
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f383 8811 	msr	BASEPRI, r3
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200152ec 	.word	0x200152ec
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80032d2:	f3ef 8311 	mrs	r3, BASEPRI
 80032d6:	f04f 0120 	mov.w	r1, #32
 80032da:	f381 8811 	msr	BASEPRI, r1
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	4807      	ldr	r0, [pc, #28]	@ (8003300 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80032e2:	f7ff f986 	bl	80025f2 <_PreparePacket>
 80032e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80032e8:	2203      	movs	r2, #3
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	6838      	ldr	r0, [r7, #0]
 80032ee:	f7ff fa6d 	bl	80027cc <_SendPacket>
  RECORD_END();
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f383 8811 	msr	BASEPRI, r3
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200152ec 	.word	0x200152ec

08003304 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800330a:	f3ef 8311 	mrs	r3, BASEPRI
 800330e:	f04f 0120 	mov.w	r1, #32
 8003312:	f381 8811 	msr	BASEPRI, r1
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	4807      	ldr	r0, [pc, #28]	@ (8003338 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800331a:	f7ff f96a 	bl	80025f2 <_PreparePacket>
 800331e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003320:	2212      	movs	r2, #18
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	f7ff fa51 	bl	80027cc <_SendPacket>
  RECORD_END();
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f383 8811 	msr	BASEPRI, r3
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200152ec 	.word	0x200152ec

0800333c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003342:	f3ef 8311 	mrs	r3, BASEPRI
 8003346:	f04f 0120 	mov.w	r1, #32
 800334a:	f381 8811 	msr	BASEPRI, r1
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	4807      	ldr	r0, [pc, #28]	@ (8003370 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003352:	f7ff f94e 	bl	80025f2 <_PreparePacket>
 8003356:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003358:	2211      	movs	r2, #17
 800335a:	6839      	ldr	r1, [r7, #0]
 800335c:	6838      	ldr	r0, [r7, #0]
 800335e:	f7ff fa35 	bl	80027cc <_SendPacket>
  RECORD_END();
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f383 8811 	msr	BASEPRI, r3
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200152ec 	.word	0x200152ec

08003374 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800337c:	f3ef 8311 	mrs	r3, BASEPRI
 8003380:	f04f 0120 	mov.w	r1, #32
 8003384:	f381 8811 	msr	BASEPRI, r1
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	4819      	ldr	r0, [pc, #100]	@ (80033f0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800338c:	f7ff f931 	bl	80025f2 <_PreparePacket>
 8003390:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003396:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	e00b      	b.n	80033c2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	1c59      	adds	r1, r3, #1
 80033b2:	61f9      	str	r1, [r7, #28]
 80033b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	09db      	lsrs	r3, r3, #7
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80033c6:	d8f0      	bhi.n	80033aa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	61fa      	str	r2, [r7, #28]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80033d8:	2208      	movs	r2, #8
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	6938      	ldr	r0, [r7, #16]
 80033de:	f7ff f9f5 	bl	80027cc <_SendPacket>
  RECORD_END();
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f383 8811 	msr	BASEPRI, r3
}
 80033e8:	bf00      	nop
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200152ec 	.word	0x200152ec
 80033f4:	200152bc 	.word	0x200152bc

080033f8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003400:	f3ef 8311 	mrs	r3, BASEPRI
 8003404:	f04f 0120 	mov.w	r1, #32
 8003408:	f381 8811 	msr	BASEPRI, r1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4819      	ldr	r0, [pc, #100]	@ (8003474 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003410:	f7ff f8ef 	bl	80025f2 <_PreparePacket>
 8003414:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800341a:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e00b      	b.n	8003446 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	61f9      	str	r1, [r7, #28]
 8003438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	09db      	lsrs	r3, r3, #7
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b7f      	cmp	r3, #127	@ 0x7f
 800344a:	d8f0      	bhi.n	800342e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	61fa      	str	r2, [r7, #28]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800345c:	2204      	movs	r2, #4
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	6938      	ldr	r0, [r7, #16]
 8003462:	f7ff f9b3 	bl	80027cc <_SendPacket>
  RECORD_END();
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f383 8811 	msr	BASEPRI, r3
}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	200152ec 	.word	0x200152ec
 8003478:	200152bc 	.word	0x200152bc

0800347c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003484:	f3ef 8311 	mrs	r3, BASEPRI
 8003488:	f04f 0120 	mov.w	r1, #32
 800348c:	f381 8811 	msr	BASEPRI, r1
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	4819      	ldr	r0, [pc, #100]	@ (80034f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003494:	f7ff f8ad 	bl	80025f2 <_PreparePacket>
 8003498:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800349e:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e00b      	b.n	80034ca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	61f9      	str	r1, [r7, #28]
 80034bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	09db      	lsrs	r3, r3, #7
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80034ce:	d8f0      	bhi.n	80034b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80034e0:	2206      	movs	r2, #6
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	6938      	ldr	r0, [r7, #16]
 80034e6:	f7ff f971 	bl	80027cc <_SendPacket>
  RECORD_END();
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f383 8811 	msr	BASEPRI, r3
}
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200152ec 	.word	0x200152ec
 80034fc:	200152bc 	.word	0x200152bc

08003500 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800350a:	4b40      	ldr	r3, [pc, #256]	@ (800360c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d077      	beq.n	8003602 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8003512:	4b3e      	ldr	r3, [pc, #248]	@ (800360c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003518:	2300      	movs	r3, #0
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351c:	e008      	b.n	8003530 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800351e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8003524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	3301      	adds	r3, #1
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003534:	429a      	cmp	r2, r3
 8003536:	d3f2      	bcc.n	800351e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003538:	e000      	b.n	800353c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800353a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d055      	beq.n	80035ee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003542:	f3ef 8311 	mrs	r3, BASEPRI
 8003546:	f04f 0120 	mov.w	r1, #32
 800354a:	f381 8811 	msr	BASEPRI, r1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	482f      	ldr	r0, [pc, #188]	@ (8003610 <SEGGER_SYSVIEW_SendModule+0x110>)
 8003552:	f7ff f84e 	bl	80025f2 <_PreparePacket>
 8003556:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	623b      	str	r3, [r7, #32]
 8003564:	e00b      	b.n	800357e <SEGGER_SYSVIEW_SendModule+0x7e>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	1c59      	adds	r1, r3, #1
 800356e:	6279      	str	r1, [r7, #36]	@ 0x24
 8003570:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	09db      	lsrs	r3, r3, #7
 800357c:	623b      	str	r3, [r7, #32]
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b7f      	cmp	r3, #127	@ 0x7f
 8003582:	d8f0      	bhi.n	8003566 <SEGGER_SYSVIEW_SendModule+0x66>
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	627a      	str	r2, [r7, #36]	@ 0x24
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e00b      	b.n	80035b8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	61f9      	str	r1, [r7, #28]
 80035aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	09db      	lsrs	r3, r3, #7
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80035bc:	d8f0      	bhi.n	80035a0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	61fa      	str	r2, [r7, #28]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80035ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2280      	movs	r2, #128	@ 0x80
 80035d4:	4619      	mov	r1, r3
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7fe ffd2 	bl	8002580 <_EncodeStr>
 80035dc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80035de:	2216      	movs	r2, #22
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	6938      	ldr	r0, [r7, #16]
 80035e4:	f7ff f8f2 	bl	80027cc <_SendPacket>
      RECORD_END();
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80035ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <SEGGER_SYSVIEW_SendModule+0x102>
 80035f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4798      	blx	r3
    }
  }
}
 8003602:	bf00      	nop
 8003604:	3730      	adds	r7, #48	@ 0x30
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200152e4 	.word	0x200152e4
 8003610:	200152ec 	.word	0x200152ec

08003614 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800361a:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00f      	beq.n	8003642 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003622:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f2      	bne.n	8003628 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200152e4 	.word	0x200152e4

08003650 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003656:	f3ef 8311 	mrs	r3, BASEPRI
 800365a:	f04f 0120 	mov.w	r1, #32
 800365e:	f381 8811 	msr	BASEPRI, r1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	4817      	ldr	r0, [pc, #92]	@ (80036c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003666:	f7fe ffc4 	bl	80025f2 <_PreparePacket>
 800366a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	e00b      	b.n	8003694 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	6179      	str	r1, [r7, #20]
 8003686:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	09db      	lsrs	r3, r3, #7
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b7f      	cmp	r3, #127	@ 0x7f
 8003698:	d8f0      	bhi.n	800367c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	617a      	str	r2, [r7, #20]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80036aa:	221b      	movs	r2, #27
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	f7ff f88c 	bl	80027cc <_SendPacket>
  RECORD_END();
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f383 8811 	msr	BASEPRI, r3
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200152ec 	.word	0x200152ec
 80036c8:	200152e8 	.word	0x200152e8

080036cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80036d4:	f3ef 8311 	mrs	r3, BASEPRI
 80036d8:	f04f 0120 	mov.w	r1, #32
 80036dc:	f381 8811 	msr	BASEPRI, r1
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	4827      	ldr	r0, [pc, #156]	@ (8003780 <SEGGER_SYSVIEW_Warn+0xb4>)
 80036e4:	f7fe ff85 	bl	80025f2 <_PreparePacket>
 80036e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80036ea:	2280      	movs	r2, #128	@ 0x80
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	6938      	ldr	r0, [r7, #16]
 80036f0:	f7fe ff46 	bl	8002580 <_EncodeStr>
 80036f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fa:	2301      	movs	r3, #1
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	e00b      	b.n	8003718 <SEGGER_SYSVIEW_Warn+0x4c>
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	6279      	str	r1, [r7, #36]	@ 0x24
 800370a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	09db      	lsrs	r3, r3, #7
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b7f      	cmp	r3, #127	@ 0x7f
 800371c:	d8f0      	bhi.n	8003700 <SEGGER_SYSVIEW_Warn+0x34>
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	627a      	str	r2, [r7, #36]	@ 0x24
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e00b      	b.n	8003750 <SEGGER_SYSVIEW_Warn+0x84>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	61f9      	str	r1, [r7, #28]
 8003742:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	09db      	lsrs	r3, r3, #7
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b7f      	cmp	r3, #127	@ 0x7f
 8003754:	d8f0      	bhi.n	8003738 <SEGGER_SYSVIEW_Warn+0x6c>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	61fa      	str	r2, [r7, #28]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003766:	221a      	movs	r2, #26
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	6938      	ldr	r0, [r7, #16]
 800376c:	f7ff f82e 	bl	80027cc <_SendPacket>
  RECORD_END();
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f383 8811 	msr	BASEPRI, r3
}
 8003776:	bf00      	nop
 8003778:	3728      	adds	r7, #40	@ 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200152ec 	.word	0x200152ec

08003784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800378a:	f000 fcc9 	bl	8004120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800378e:	f000 f879 	bl	8003884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003792:	f000 f917 	bl	80039c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003796:	f000 f8e7 	bl	8003968 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 800379a:	f7fe fb57 	bl	8001e4c <LCD_init>
  LCD_send_string("EMotoRad Assign");
 800379e:	482d      	ldr	r0, [pc, #180]	@ (8003854 <main+0xd0>)
 80037a0:	f7fe fbee 	bl	8001f80 <LCD_send_string>
  LCD_send_command(ROW_2);
 80037a4:	20c0      	movs	r0, #192	@ 0xc0
 80037a6:	f7fe fb8b 	bl	8001ec0 <LCD_send_command>
  LCD_send_string("Sanket Gunjal");
 80037aa:	482b      	ldr	r0, [pc, #172]	@ (8003858 <main+0xd4>)
 80037ac:	f7fe fbe8 	bl	8001f80 <LCD_send_string>

  HAL_Delay(1000);
 80037b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037b4:	f000 fcf6 	bl	80041a4 <HAL_Delay>
  /*	Contains status of the newly created task	*/
  BaseType_t stat;

  DWT_CTRL |= (1 << 0);					// Used by segger system view to enable the cyclic count
 80037b8:	4b28      	ldr	r3, [pc, #160]	@ (800385c <main+0xd8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a27      	ldr	r2, [pc, #156]	@ (800385c <main+0xd8>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80037c4:	f7fe fc00 	bl	8001fc8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80037c8:	f7ff fa76 	bl	8002cb8 <SEGGER_SYSVIEW_Start>

  /*	Create a task for the Switch Press	*/
  stat = xTaskCreate(sw_press, "Switch Press", 128, NULL, 4, &sw_press_handle);
 80037cc:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <main+0xdc>)
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	2304      	movs	r3, #4
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	4922      	ldr	r1, [pc, #136]	@ (8003864 <main+0xe0>)
 80037da:	4823      	ldr	r0, [pc, #140]	@ (8003868 <main+0xe4>)
 80037dc:	f7fc ff6a 	bl	80006b4 <xTaskCreate>
 80037e0:	60f8      	str	r0, [r7, #12]
  configASSERT(stat == pdPASS);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d00b      	beq.n	8003800 <main+0x7c>
        __asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	60bb      	str	r3, [r7, #8]
    }
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <main+0x78>

  stat = xTaskCreate(led_control, "LED Control", 128, NULL, 2, &led_control_handle);
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <main+0xe8>)
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	2280      	movs	r2, #128	@ 0x80
 800380c:	4918      	ldr	r1, [pc, #96]	@ (8003870 <main+0xec>)
 800380e:	4819      	ldr	r0, [pc, #100]	@ (8003874 <main+0xf0>)
 8003810:	f7fc ff50 	bl	80006b4 <xTaskCreate>
 8003814:	60f8      	str	r0, [r7, #12]
  configASSERT(stat == pdPASS);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d00b      	beq.n	8003834 <main+0xb0>
        __asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	607b      	str	r3, [r7, #4]
    }
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <main+0xac>

  stat = xTaskCreate(lcd_update, "LCD Update", 128, NULL, 3, &lcd_update_handle);
 8003834:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <main+0xf4>)
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2303      	movs	r3, #3
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2300      	movs	r3, #0
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	490e      	ldr	r1, [pc, #56]	@ (800387c <main+0xf8>)
 8003842:	480f      	ldr	r0, [pc, #60]	@ (8003880 <main+0xfc>)
 8003844:	f7fc ff36 	bl	80006b4 <xTaskCreate>
 8003848:	60f8      	str	r0, [r7, #12]

  /*	Start the scheduler	*/
  vTaskStartScheduler();
 800384a:	f7fd f8f3 	bl	8000a34 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <main+0xca>
 8003852:	bf00      	nop
 8003854:	080063dc 	.word	0x080063dc
 8003858:	080063ec 	.word	0x080063ec
 800385c:	e0001000 	.word	0xe0001000
 8003860:	20015424 	.word	0x20015424
 8003864:	080063fc 	.word	0x080063fc
 8003868:	08003b05 	.word	0x08003b05
 800386c:	20015428 	.word	0x20015428
 8003870:	0800640c 	.word	0x0800640c
 8003874:	08003bcd 	.word	0x08003bcd
 8003878:	2001542c 	.word	0x2001542c
 800387c:	08006418 	.word	0x08006418
 8003880:	08003cd9 	.word	0x08003cd9

08003884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b094      	sub	sp, #80	@ 0x50
 8003888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	2234      	movs	r2, #52	@ 0x34
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fcf8 	bl	8006288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <SystemClock_Config+0xdc>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003960 <SystemClock_Config+0xdc>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b8:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <SystemClock_Config+0xdc>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c4:	2300      	movs	r3, #0
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4b26      	ldr	r3, [pc, #152]	@ (8003964 <SystemClock_Config+0xe0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a25      	ldr	r2, [pc, #148]	@ (8003964 <SystemClock_Config+0xe0>)
 80038ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <SystemClock_Config+0xe0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038e0:	2302      	movs	r3, #2
 80038e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038e4:	2301      	movs	r3, #1
 80038e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038e8:	2310      	movs	r3, #16
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ec:	2302      	movs	r3, #2
 80038ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038f0:	2300      	movs	r3, #0
 80038f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038f4:	2308      	movs	r3, #8
 80038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80038f8:	23b4      	movs	r3, #180	@ 0xb4
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038fc:	2302      	movs	r3, #2
 80038fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003900:	2302      	movs	r3, #2
 8003902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003904:	2302      	movs	r3, #2
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	4618      	mov	r0, r3
 800390e:	f001 ff6b 	bl	80057e8 <HAL_RCC_OscConfig>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003918:	f000 fa8a 	bl	8003e30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800391c:	f001 fbac 	bl	8005078 <HAL_PWREx_EnableOverDrive>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003926:	f000 fa83 	bl	8003e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800392a:	230f      	movs	r3, #15
 800392c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800392e:	2302      	movs	r3, #2
 8003930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003936:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800393a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800393c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003940:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	2105      	movs	r1, #5
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fbe5 	bl	8005118 <HAL_RCC_ClockConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003954:	f000 fa6c 	bl	8003e30 <Error_Handler>
  }
}
 8003958:	bf00      	nop
 800395a:	3750      	adds	r7, #80	@ 0x50
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000

08003968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800396c:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <MX_I2C1_Init+0x50>)
 800396e:	4a13      	ldr	r2, [pc, #76]	@ (80039bc <MX_I2C1_Init+0x54>)
 8003970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003972:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <MX_I2C1_Init+0x50>)
 8003974:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <MX_I2C1_Init+0x58>)
 8003976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003978:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <MX_I2C1_Init+0x50>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800397e:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <MX_I2C1_Init+0x50>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <MX_I2C1_Init+0x50>)
 8003986:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800398a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <MX_I2C1_Init+0x50>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <MX_I2C1_Init+0x50>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003998:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <MX_I2C1_Init+0x50>)
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <MX_I2C1_Init+0x50>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039a4:	4804      	ldr	r0, [pc, #16]	@ (80039b8 <MX_I2C1_Init+0x50>)
 80039a6:	f000 fec9 	bl	800473c <HAL_I2C_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039b0:	f000 fa3e 	bl	8003e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	200153d0 	.word	0x200153d0
 80039bc:	40005400 	.word	0x40005400
 80039c0:	000186a0 	.word	0x000186a0

080039c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	@ 0x28
 80039c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	4b45      	ldr	r3, [pc, #276]	@ (8003af4 <MX_GPIO_Init+0x130>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	4a44      	ldr	r2, [pc, #272]	@ (8003af4 <MX_GPIO_Init+0x130>)
 80039e4:	f043 0304 	orr.w	r3, r3, #4
 80039e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ea:	4b42      	ldr	r3, [pc, #264]	@ (8003af4 <MX_GPIO_Init+0x130>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <MX_GPIO_Init+0x130>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	4a3d      	ldr	r2, [pc, #244]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	4a36      	ldr	r2, [pc, #216]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a22:	4b34      	ldr	r3, [pc, #208]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	4b30      	ldr	r3, [pc, #192]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	4a2f      	ldr	r2, [pc, #188]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003af4 <MX_GPIO_Init+0x130>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	482a      	ldr	r0, [pc, #168]	@ (8003af8 <MX_GPIO_Init+0x134>)
 8003a50:	f000 fe5a 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2130      	movs	r1, #48	@ 0x30
 8003a58:	4828      	ldr	r0, [pc, #160]	@ (8003afc <MX_GPIO_Init+0x138>)
 8003a5a:	f000 fe55 	bl	8004708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4619      	mov	r1, r3
 8003a74:	4822      	ldr	r0, [pc, #136]	@ (8003b00 <MX_GPIO_Init+0x13c>)
 8003a76:	f000 fc9b 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a7a:	230c      	movs	r3, #12
 8003a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a8a:	2307      	movs	r3, #7
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	f107 0314 	add.w	r3, r7, #20
 8003a92:	4619      	mov	r1, r3
 8003a94:	4818      	ldr	r0, [pc, #96]	@ (8003af8 <MX_GPIO_Init+0x134>)
 8003a96:	f000 fc8b 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4811      	ldr	r0, [pc, #68]	@ (8003af8 <MX_GPIO_Init+0x134>)
 8003ab2:	f000 fc7d 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8003ab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	4619      	mov	r1, r3
 8003aca:	480b      	ldr	r0, [pc, #44]	@ (8003af8 <MX_GPIO_Init+0x134>)
 8003acc:	f000 fc70 	bl	80043b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003ad0:	2330      	movs	r3, #48	@ 0x30
 8003ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4805      	ldr	r0, [pc, #20]	@ (8003afc <MX_GPIO_Init+0x138>)
 8003ae8:	f000 fc62 	bl	80043b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003aec:	bf00      	nop
 8003aee:	3728      	adds	r7, #40	@ 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40020000 	.word	0x40020000
 8003afc:	40020400 	.word	0x40020400
 8003b00:	40020800 	.word	0x40020800

08003b04 <sw_press>:

/* USER CODE BEGIN 4 */
static void sw_press(void *param){
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	6078      	str	r0, [r7, #4]
	/*	prev_press are for debouncing	*/
	uint8_t sw1_prev_press, sw2_prev_press;
	uint8_t sw1_curr_press, sw2_curr_press;

	/*	pull-up on switch	*/
	sw1_prev_press = 1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
	sw2_prev_press = 1;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73bb      	strb	r3, [r7, #14]

	while(1){

		sw1_curr_press = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);			// If pressed, state = 0!
 8003b14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b18:	482a      	ldr	r0, [pc, #168]	@ (8003bc4 <sw_press+0xc0>)
 8003b1a:	f000 fddd 	bl	80046d8 <HAL_GPIO_ReadPin>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	737b      	strb	r3, [r7, #13]
		sw2_curr_press = HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8003b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b26:	4827      	ldr	r0, [pc, #156]	@ (8003bc4 <sw_press+0xc0>)
 8003b28:	f000 fdd6 	bl	80046d8 <HAL_GPIO_ReadPin>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	733b      	strb	r3, [r7, #12]

		/*	Check if both switch pressed, sw1 pressed only, sw2 pressed only, no switch pressed1	*/
		if((sw1_curr_press == GPIO_PIN_RESET && sw1_prev_press == GPIO_PIN_SET) && (sw2_curr_press == GPIO_PIN_RESET && sw2_prev_press == GPIO_PIN_SET)){
 8003b30:	7b7b      	ldrb	r3, [r7, #13]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d112      	bne.n	8003b5c <sw_press+0x58>
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10f      	bne.n	8003b5c <sw_press+0x58>
 8003b3c:	7b3b      	ldrb	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <sw_press+0x58>
 8003b42:	7bbb      	ldrb	r3, [r7, #14]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d109      	bne.n	8003b5c <sw_press+0x58>
			xTaskNotify(led_control_handle, BOTH_SW_PRESSED, eSetValueWithOverwrite);
 8003b48:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc8 <sw_press+0xc4>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2303      	movs	r3, #3
 8003b52:	2202      	movs	r2, #2
 8003b54:	2100      	movs	r1, #0
 8003b56:	f7fd fb9d 	bl	8001294 <xTaskGenericNotify>
 8003b5a:	e02a      	b.n	8003bb2 <sw_press+0xae>
		}
		else if((sw1_curr_press == GPIO_PIN_RESET && sw1_prev_press == GPIO_PIN_SET) && (sw2_curr_press == GPIO_PIN_SET && sw2_prev_press == GPIO_PIN_SET)){
 8003b5c:	7b7b      	ldrb	r3, [r7, #13]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d112      	bne.n	8003b88 <sw_press+0x84>
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10f      	bne.n	8003b88 <sw_press+0x84>
 8003b68:	7b3b      	ldrb	r3, [r7, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10c      	bne.n	8003b88 <sw_press+0x84>
 8003b6e:	7bbb      	ldrb	r3, [r7, #14]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d109      	bne.n	8003b88 <sw_press+0x84>
			xTaskNotify(led_control_handle, SW1_PRESSED, eSetValueWithOverwrite);
 8003b74:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <sw_press+0xc4>)
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	f7fd fb87 	bl	8001294 <xTaskGenericNotify>
 8003b86:	e014      	b.n	8003bb2 <sw_press+0xae>
		}
		else if((sw1_curr_press == GPIO_PIN_SET && sw1_prev_press == GPIO_PIN_SET) && (sw2_curr_press == GPIO_PIN_RESET && sw2_prev_press == GPIO_PIN_SET)){
 8003b88:	7b7b      	ldrb	r3, [r7, #13]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d111      	bne.n	8003bb2 <sw_press+0xae>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10e      	bne.n	8003bb2 <sw_press+0xae>
 8003b94:	7b3b      	ldrb	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <sw_press+0xae>
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d108      	bne.n	8003bb2 <sw_press+0xae>
			xTaskNotify(led_control_handle, SW2_PRESSED, eSetValueWithOverwrite);
 8003ba0:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <sw_press+0xc4>)
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2303      	movs	r3, #3
 8003baa:	2201      	movs	r2, #1
 8003bac:	2100      	movs	r1, #0
 8003bae:	f7fd fb71 	bl	8001294 <xTaskGenericNotify>
		}
		//else{
		//	xTaskNotify(led_control_handle, NO_SW_PRESSED, eSetValueWithOverwrite);
		//}
		sw1_prev_press = sw1_curr_press;
 8003bb2:	7b7b      	ldrb	r3, [r7, #13]
 8003bb4:	73fb      	strb	r3, [r7, #15]
		sw2_prev_press = sw2_curr_press;
 8003bb6:	7b3b      	ldrb	r3, [r7, #12]
 8003bb8:	73bb      	strb	r3, [r7, #14]

		vTaskDelay(pdMS_TO_TICKS(100));
 8003bba:	2064      	movs	r0, #100	@ 0x64
 8003bbc:	f7fc ff04 	bl	80009c8 <vTaskDelay>
		sw1_curr_press = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);			// If pressed, state = 0!
 8003bc0:	e7a8      	b.n	8003b14 <sw_press+0x10>
 8003bc2:	bf00      	nop
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	20015428 	.word	0x20015428

08003bcc <led_control>:
	}

}

static void led_control(void *param){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	6078      	str	r0, [r7, #4]
	uint32_t notify_val;
	BaseType_t stat;
	uint8_t flag = 1;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]

	while(1){
		stat = xTaskNotifyWait(0, 0, &notify_val, pdMS_TO_TICKS(CONTROL_NO_SW_PRESS_TIME));
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003be0:	9200      	str	r2, [sp, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2100      	movs	r1, #0
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fd fad4 	bl	8001194 <xTaskGenericNotifyWait>
 8003bec:	6138      	str	r0, [r7, #16]
		if(stat == pdTRUE){
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d13c      	bne.n	8003c6e <led_control+0xa2>
			// Event Occured!
			stat = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
			/*	If both Switch are not pressed at the same time, reset the state of LEDs	*/
			if(notify_val != BOTH_SW_PRESSED){
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d00a      	beq.n	8003c14 <led_control+0x48>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2120      	movs	r1, #32
 8003c02:	4832      	ldr	r0, [pc, #200]	@ (8003ccc <led_control+0x100>)
 8003c04:	f000 fd80 	bl	8004708 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	4830      	ldr	r0, [pc, #192]	@ (8003cd0 <led_control+0x104>)
 8003c0e:	f000 fd7b 	bl	8004708 <HAL_GPIO_WritePin>
 8003c12:	e008      	b.n	8003c26 <led_control+0x5a>
			}
			else{
				// Both switch are pressed at the same time!
				xTaskNotify(lcd_update_handle, BOTH_SW_PRESSED, eSetValueWithOverwrite);
 8003c14:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd4 <led_control+0x108>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	2202      	movs	r2, #2
 8003c20:	2100      	movs	r1, #0
 8003c22:	f7fd fb37 	bl	8001294 <xTaskGenericNotify>
			}

			switch(notify_val){
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <led_control+0x66>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d00f      	beq.n	8003c50 <led_control+0x84>
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
					break;
				}

				default:{
					break;
 8003c30:	e04b      	b.n	8003cca <led_control+0xfe>
					xTaskNotify(lcd_update_handle, SW1_PRESSED, eSetValueWithOverwrite);
 8003c32:	4b28      	ldr	r3, [pc, #160]	@ (8003cd4 <led_control+0x108>)
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f7fd fb28 	bl	8001294 <xTaskGenericNotify>
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8003c44:	2201      	movs	r2, #1
 8003c46:	2120      	movs	r1, #32
 8003c48:	4821      	ldr	r0, [pc, #132]	@ (8003cd0 <led_control+0x104>)
 8003c4a:	f000 fd5d 	bl	8004708 <HAL_GPIO_WritePin>
					break;
 8003c4e:	e03c      	b.n	8003cca <led_control+0xfe>
					xTaskNotify(lcd_update_handle, SW2_PRESSED, eSetValueWithOverwrite);
 8003c50:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <led_control+0x108>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2303      	movs	r3, #3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f7fd fb19 	bl	8001294 <xTaskGenericNotify>
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003c62:	2201      	movs	r2, #1
 8003c64:	2120      	movs	r1, #32
 8003c66:	4819      	ldr	r0, [pc, #100]	@ (8003ccc <led_control+0x100>)
 8003c68:	f000 fd4e 	bl	8004708 <HAL_GPIO_WritePin>
					break;
 8003c6c:	e02d      	b.n	8003cca <led_control+0xfe>
				}
			}
		}
		else{
			if(flag){
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <led_control+0xd4>
				xTaskNotify(lcd_update_handle, NO_SW_PRESSED_RED_HIGH, eSetValueWithOverwrite);
 8003c74:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <led_control+0x108>)
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	2204      	movs	r2, #4
 8003c80:	2100      	movs	r1, #0
 8003c82:	f7fd fb07 	bl	8001294 <xTaskGenericNotify>
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8003c86:	2201      	movs	r2, #1
 8003c88:	2120      	movs	r1, #32
 8003c8a:	4811      	ldr	r0, [pc, #68]	@ (8003cd0 <led_control+0x104>)
 8003c8c:	f000 fd3c 	bl	8004708 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2120      	movs	r1, #32
 8003c94:	480d      	ldr	r0, [pc, #52]	@ (8003ccc <led_control+0x100>)
 8003c96:	f000 fd37 	bl	8004708 <HAL_GPIO_WritePin>
				flag = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
 8003c9e:	e79b      	b.n	8003bd8 <led_control+0xc>
			}
			else{
				xTaskNotify(lcd_update_handle, NO_SW_PRESSED_GREEN_HIGH, eSetValueWithOverwrite);
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <led_control+0x108>)
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2303      	movs	r3, #3
 8003caa:	2205      	movs	r2, #5
 8003cac:	2100      	movs	r1, #0
 8003cae:	f7fd faf1 	bl	8001294 <xTaskGenericNotify>
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	4806      	ldr	r0, [pc, #24]	@ (8003cd0 <led_control+0x104>)
 8003cb8:	f000 fd26 	bl	8004708 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	4802      	ldr	r0, [pc, #8]	@ (8003ccc <led_control+0x100>)
 8003cc2:	f000 fd21 	bl	8004708 <HAL_GPIO_WritePin>
				flag = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
		stat = xTaskNotifyWait(0, 0, &notify_val, pdMS_TO_TICKS(CONTROL_NO_SW_PRESS_TIME));
 8003cca:	e785      	b.n	8003bd8 <led_control+0xc>
 8003ccc:	40020000 	.word	0x40020000
 8003cd0:	40020400 	.word	0x40020400
 8003cd4:	2001542c 	.word	0x2001542c

08003cd8 <lcd_update>:
			}
		}
	}
}

static void lcd_update(void *param){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	6078      	str	r0, [r7, #4]
	uint32_t notify_val;
	BaseType_t stat;

	while(1){
		/*	Wait Indefinitely for a notification*/
		stat = xTaskNotifyWait(0, 0, &notify_val, portMAX_DELAY);
 8003ce0:	f107 0308 	add.w	r3, r7, #8
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ce8:	9200      	str	r2, [sp, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fd fa50 	bl	8001194 <xTaskGenericNotifyWait>
 8003cf4:	60f8      	str	r0, [r7, #12]
		if(stat == pdTRUE){
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d1f1      	bne.n	8003ce0 <lcd_update+0x8>
			stat = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
			switch(notify_val){
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d8ec      	bhi.n	8003ce0 <lcd_update+0x8>
 8003d06:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <lcd_update+0x34>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d97 	.word	0x08003d97
 8003d14:	08003dbd 	.word	0x08003dbd
 8003d18:	08003ce1 	.word	0x08003ce1
 8003d1c:	08003d25 	.word	0x08003d25
 8003d20:	08003d4b 	.word	0x08003d4b
				case NO_SW_PRESSED_RED_HIGH:{
					LCD_send_command(CLEAR_SCREEN);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7fe f8cb 	bl	8001ec0 <LCD_send_command>
					HAL_Delay(2);
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	f000 fa3a 	bl	80041a4 <HAL_Delay>
					LCD_send_command(ROW_1);
 8003d30:	2080      	movs	r0, #128	@ 0x80
 8003d32:	f7fe f8c5 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Act: No SW");
 8003d36:	482c      	ldr	r0, [pc, #176]	@ (8003de8 <lcd_update+0x110>)
 8003d38:	f7fe f922 	bl	8001f80 <LCD_send_string>
					LCD_send_command(ROW_2);
 8003d3c:	20c0      	movs	r0, #192	@ 0xc0
 8003d3e:	f7fe f8bf 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Stat: Red HIGH");
 8003d42:	482a      	ldr	r0, [pc, #168]	@ (8003dec <lcd_update+0x114>)
 8003d44:	f7fe f91c 	bl	8001f80 <LCD_send_string>
					break;
 8003d48:	e04c      	b.n	8003de4 <lcd_update+0x10c>
				}

				case NO_SW_PRESSED_GREEN_HIGH: {
					LCD_send_command(CLEAR_SCREEN);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7fe f8b8 	bl	8001ec0 <LCD_send_command>
					HAL_Delay(2);
 8003d50:	2002      	movs	r0, #2
 8003d52:	f000 fa27 	bl	80041a4 <HAL_Delay>
					LCD_send_command(ROW_1);
 8003d56:	2080      	movs	r0, #128	@ 0x80
 8003d58:	f7fe f8b2 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Act: No SW");
 8003d5c:	4822      	ldr	r0, [pc, #136]	@ (8003de8 <lcd_update+0x110>)
 8003d5e:	f7fe f90f 	bl	8001f80 <LCD_send_string>
					LCD_send_command(ROW_2);
 8003d62:	20c0      	movs	r0, #192	@ 0xc0
 8003d64:	f7fe f8ac 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Stat: Green HIGH");
 8003d68:	4821      	ldr	r0, [pc, #132]	@ (8003df0 <lcd_update+0x118>)
 8003d6a:	f7fe f909 	bl	8001f80 <LCD_send_string>
					break;
 8003d6e:	e039      	b.n	8003de4 <lcd_update+0x10c>
				}
				case SW1_PRESSED:{
					LCD_send_command(CLEAR_SCREEN);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7fe f8a5 	bl	8001ec0 <LCD_send_command>
					HAL_Delay(2);
 8003d76:	2002      	movs	r0, #2
 8003d78:	f000 fa14 	bl	80041a4 <HAL_Delay>
					LCD_send_command(ROW_1);
 8003d7c:	2080      	movs	r0, #128	@ 0x80
 8003d7e:	f7fe f89f 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Act: SW1 HIGH");
 8003d82:	481c      	ldr	r0, [pc, #112]	@ (8003df4 <lcd_update+0x11c>)
 8003d84:	f7fe f8fc 	bl	8001f80 <LCD_send_string>
					LCD_send_command(ROW_2);
 8003d88:	20c0      	movs	r0, #192	@ 0xc0
 8003d8a:	f7fe f899 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Stat: RED HIGH");
 8003d8e:	481a      	ldr	r0, [pc, #104]	@ (8003df8 <lcd_update+0x120>)
 8003d90:	f7fe f8f6 	bl	8001f80 <LCD_send_string>
					break;
 8003d94:	e026      	b.n	8003de4 <lcd_update+0x10c>
				}

				case SW2_PRESSED:{
					LCD_send_command(CLEAR_SCREEN);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f7fe f892 	bl	8001ec0 <LCD_send_command>
					HAL_Delay(2);
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f000 fa01 	bl	80041a4 <HAL_Delay>
					LCD_send_command(ROW_1);
 8003da2:	2080      	movs	r0, #128	@ 0x80
 8003da4:	f7fe f88c 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Act: SW2 HIGH");
 8003da8:	4814      	ldr	r0, [pc, #80]	@ (8003dfc <lcd_update+0x124>)
 8003daa:	f7fe f8e9 	bl	8001f80 <LCD_send_string>
					LCD_send_command(ROW_2);
 8003dae:	20c0      	movs	r0, #192	@ 0xc0
 8003db0:	f7fe f886 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Stat: GREEN HIGH");
 8003db4:	4812      	ldr	r0, [pc, #72]	@ (8003e00 <lcd_update+0x128>)
 8003db6:	f7fe f8e3 	bl	8001f80 <LCD_send_string>
					break;
 8003dba:	e013      	b.n	8003de4 <lcd_update+0x10c>
				}

				case BOTH_SW_PRESSED:{
					LCD_send_command(CLEAR_SCREEN);
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f7fe f87f 	bl	8001ec0 <LCD_send_command>
					HAL_Delay(2);
 8003dc2:	2002      	movs	r0, #2
 8003dc4:	f000 f9ee 	bl	80041a4 <HAL_Delay>
					LCD_send_command(ROW_1);
 8003dc8:	2080      	movs	r0, #128	@ 0x80
 8003dca:	f7fe f879 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Act: SW1 & SW2");
 8003dce:	480d      	ldr	r0, [pc, #52]	@ (8003e04 <lcd_update+0x12c>)
 8003dd0:	f7fe f8d6 	bl	8001f80 <LCD_send_string>
					LCD_send_command(ROW_2);
 8003dd4:	20c0      	movs	r0, #192	@ 0xc0
 8003dd6:	f7fe f873 	bl	8001ec0 <LCD_send_command>
					LCD_send_string("Stat: No Change");
 8003dda:	480b      	ldr	r0, [pc, #44]	@ (8003e08 <lcd_update+0x130>)
 8003ddc:	f7fe f8d0 	bl	8001f80 <LCD_send_string>
					break;
 8003de0:	bf00      	nop
 8003de2:	e77d      	b.n	8003ce0 <lcd_update+0x8>
		stat = xTaskNotifyWait(0, 0, &notify_val, portMAX_DELAY);
 8003de4:	e77c      	b.n	8003ce0 <lcd_update+0x8>
 8003de6:	bf00      	nop
 8003de8:	08006424 	.word	0x08006424
 8003dec:	08006430 	.word	0x08006430
 8003df0:	08006440 	.word	0x08006440
 8003df4:	08006454 	.word	0x08006454
 8003df8:	08006464 	.word	0x08006464
 8003dfc:	08006474 	.word	0x08006474
 8003e00:	08006484 	.word	0x08006484
 8003e04:	08006498 	.word	0x08006498
 8003e08:	080064a8 	.word	0x080064a8

08003e0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e1e:	f000 f9a1 	bl	8004164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40001000 	.word	0x40001000

08003e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e34:	b672      	cpsid	i
}
 8003e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <Error_Handler+0x8>

08003e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <__NVIC_SetPriorityGrouping+0x44>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e6e:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <__NVIC_SetPriorityGrouping+0x44>)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	60d3      	str	r3, [r2, #12]
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <HAL_MspInit+0x4c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed0 <HAL_MspInit+0x4c>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <HAL_MspInit+0x4c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea2:	607b      	str	r3, [r7, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <HAL_MspInit+0x4c>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4a08      	ldr	r2, [pc, #32]	@ (8003ed0 <HAL_MspInit+0x4c>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_MspInit+0x4c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7ff ffba 	bl	8003e3c <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	@ 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <HAL_I2C_MspInit+0x84>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d12c      	bne.n	8003f50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	4b18      	ldr	r3, [pc, #96]	@ (8003f5c <HAL_I2C_MspInit+0x88>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	4a17      	ldr	r2, [pc, #92]	@ (8003f5c <HAL_I2C_MspInit+0x88>)
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <HAL_I2C_MspInit+0x88>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f18:	2312      	movs	r3, #18
 8003f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f20:	2303      	movs	r3, #3
 8003f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f24:	2304      	movs	r3, #4
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	480c      	ldr	r0, [pc, #48]	@ (8003f60 <HAL_I2C_MspInit+0x8c>)
 8003f30:	f000 fa3e 	bl	80043b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <HAL_I2C_MspInit+0x88>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <HAL_I2C_MspInit+0x88>)
 8003f3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f44:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <HAL_I2C_MspInit+0x88>)
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003f50:	bf00      	nop
 8003f52:	3728      	adds	r7, #40	@ 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40005400 	.word	0x40005400
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40020400 	.word	0x40020400

08003f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08e      	sub	sp, #56	@ 0x38
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <HAL_InitTick+0xe4>)
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	4a32      	ldr	r2, [pc, #200]	@ (8004048 <HAL_InitTick+0xe4>)
 8003f7e:	f043 0310 	orr.w	r3, r3, #16
 8003f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f84:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <HAL_InitTick+0xe4>)
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f90:	f107 0210 	add.w	r2, r7, #16
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 f9c2 	bl	8005324 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003faa:	f001 f9a7 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8003fae:	6378      	str	r0, [r7, #52]	@ 0x34
 8003fb0:	e004      	b.n	8003fbc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003fb2:	f001 f9a3 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fbe:	4a23      	ldr	r2, [pc, #140]	@ (800404c <HAL_InitTick+0xe8>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	0c9b      	lsrs	r3, r3, #18
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003fca:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <HAL_InitTick+0xec>)
 8003fcc:	4a21      	ldr	r2, [pc, #132]	@ (8004054 <HAL_InitTick+0xf0>)
 8003fce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004050 <HAL_InitTick+0xec>)
 8003fd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004050 <HAL_InitTick+0xec>)
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003fde:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <HAL_InitTick+0xec>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8004050 <HAL_InitTick+0xec>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fea:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_InitTick+0xec>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003ff0:	4817      	ldr	r0, [pc, #92]	@ (8004050 <HAL_InitTick+0xec>)
 8003ff2:	f001 fe97 	bl	8005d24 <HAL_TIM_Base_Init>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11b      	bne.n	800403c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004004:	4812      	ldr	r0, [pc, #72]	@ (8004050 <HAL_InitTick+0xec>)
 8004006:	f001 fee7 	bl	8005dd8 <HAL_TIM_Base_Start_IT>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004010:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004014:	2b00      	cmp	r3, #0
 8004016:	d111      	bne.n	800403c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004018:	2036      	movs	r0, #54	@ 0x36
 800401a:	f000 f9bb 	bl	8004394 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d808      	bhi.n	8004036 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004024:	2200      	movs	r2, #0
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	2036      	movs	r0, #54	@ 0x36
 800402a:	f000 f997 	bl	800435c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800402e:	4a0a      	ldr	r2, [pc, #40]	@ (8004058 <HAL_InitTick+0xf4>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e002      	b.n	800403c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800403c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004040:	4618      	mov	r0, r3
 8004042:	3738      	adds	r7, #56	@ 0x38
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	431bde83 	.word	0x431bde83
 8004050:	20015430 	.word	0x20015430
 8004054:	40001000 	.word	0x40001000
 8004058:	2000000c 	.word	0x2000000c

0800405c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <NMI_Handler+0x4>

08004064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <HardFault_Handler+0x4>

0800406c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <MemManage_Handler+0x4>

08004074 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004078:	bf00      	nop
 800407a:	e7fd      	b.n	8004078 <BusFault_Handler+0x4>

0800407c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <UsageFault_Handler+0x4>

08004084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004098:	4802      	ldr	r0, [pc, #8]	@ (80040a4 <TIM6_DAC_IRQHandler+0x10>)
 800409a:	f001 ff0d 	bl	8005eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20015430 	.word	0x20015430

080040a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <SystemInit+0x20>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	4a05      	ldr	r2, [pc, #20]	@ (80040c8 <SystemInit+0x20>)
 80040b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000ed00 	.word	0xe000ed00

080040cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80040d0:	f7ff ffea 	bl	80040a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040d4:	480c      	ldr	r0, [pc, #48]	@ (8004108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040d6:	490d      	ldr	r1, [pc, #52]	@ (800410c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040dc:	e002      	b.n	80040e4 <LoopCopyDataInit>

080040de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040e2:	3304      	adds	r3, #4

080040e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040e8:	d3f9      	bcc.n	80040de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f0:	e001      	b.n	80040f6 <LoopFillZerobss>

080040f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040f4:	3204      	adds	r2, #4

080040f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040f8:	d3fb      	bcc.n	80040f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80040fa:	f002 f8cd 	bl	8006298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040fe:	f7ff fb41 	bl	8003784 <main>
  bx  lr    
 8004102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800410c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004110:	08006508 	.word	0x08006508
  ldr r2, =_sbss
 8004114:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8004118:	2001547c 	.word	0x2001547c

0800411c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800411c:	e7fe      	b.n	800411c <ADC_IRQHandler>
	...

08004120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004124:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <HAL_Init+0x40>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0d      	ldr	r2, [pc, #52]	@ (8004160 <HAL_Init+0x40>)
 800412a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_Init+0x40>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <HAL_Init+0x40>)
 8004136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800413a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800413c:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <HAL_Init+0x40>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a07      	ldr	r2, [pc, #28]	@ (8004160 <HAL_Init+0x40>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004148:	2003      	movs	r0, #3
 800414a:	f000 f8fc 	bl	8004346 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800414e:	200f      	movs	r0, #15
 8004150:	f7ff ff08 	bl	8003f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004154:	f7ff fe96 	bl	8003e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023c00 	.word	0x40023c00

08004164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000010 	.word	0x20000010
 8004188:	20015478 	.word	0x20015478

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20015478 	.word	0x20015478

080041a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041bc:	d005      	beq.n	80041ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <HAL_Delay+0x44>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041ca:	bf00      	nop
 80041cc:	f7ff ffde 	bl	800418c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d8f7      	bhi.n	80041cc <HAL_Delay+0x28>
  {
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000010 	.word	0x20000010

080041ec <__NVIC_SetPriorityGrouping>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421e:	4a04      	ldr	r2, [pc, #16]	@ (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	60d3      	str	r3, [r2, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	@ (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	@ (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	@ (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	@ (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
         );
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	@ 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ff4c 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800436e:	f7ff ff61 	bl	8004234 <__NVIC_GetPriorityGrouping>
 8004372:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	6978      	ldr	r0, [r7, #20]
 800437a:	f7ff ffb1 	bl	80042e0 <NVIC_EncodePriority>
 800437e:	4602      	mov	r2, r0
 8004380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff ff80 	bl	800428c <__NVIC_SetPriority>
}
 800438c:	bf00      	nop
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ff54 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	@ 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e165      	b.n	8004698 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043cc:	2201      	movs	r2, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f040 8154 	bne.w	8004692 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d005      	beq.n	8004402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d130      	bne.n	8004464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004438:	2201      	movs	r2, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 0201 	and.w	r2, r3, #1
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b03      	cmp	r3, #3
 800446e:	d017      	beq.n	80044a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2203      	movs	r2, #3
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d123      	bne.n	80044f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	08da      	lsrs	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3208      	adds	r2, #8
 80044b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	08da      	lsrs	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	69b9      	ldr	r1, [r7, #24]
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0203 	and.w	r2, r3, #3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80ae 	beq.w	8004692 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4b5d      	ldr	r3, [pc, #372]	@ (80046b0 <HAL_GPIO_Init+0x300>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453e:	4a5c      	ldr	r2, [pc, #368]	@ (80046b0 <HAL_GPIO_Init+0x300>)
 8004540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004544:	6453      	str	r3, [r2, #68]	@ 0x44
 8004546:	4b5a      	ldr	r3, [pc, #360]	@ (80046b0 <HAL_GPIO_Init+0x300>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004552:	4a58      	ldr	r2, [pc, #352]	@ (80046b4 <HAL_GPIO_Init+0x304>)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	3302      	adds	r3, #2
 800455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a4f      	ldr	r2, [pc, #316]	@ (80046b8 <HAL_GPIO_Init+0x308>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d025      	beq.n	80045ca <HAL_GPIO_Init+0x21a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a4e      	ldr	r2, [pc, #312]	@ (80046bc <HAL_GPIO_Init+0x30c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01f      	beq.n	80045c6 <HAL_GPIO_Init+0x216>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a4d      	ldr	r2, [pc, #308]	@ (80046c0 <HAL_GPIO_Init+0x310>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d019      	beq.n	80045c2 <HAL_GPIO_Init+0x212>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a4c      	ldr	r2, [pc, #304]	@ (80046c4 <HAL_GPIO_Init+0x314>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_GPIO_Init+0x20e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a4b      	ldr	r2, [pc, #300]	@ (80046c8 <HAL_GPIO_Init+0x318>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00d      	beq.n	80045ba <HAL_GPIO_Init+0x20a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a4a      	ldr	r2, [pc, #296]	@ (80046cc <HAL_GPIO_Init+0x31c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <HAL_GPIO_Init+0x206>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a49      	ldr	r2, [pc, #292]	@ (80046d0 <HAL_GPIO_Init+0x320>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_GPIO_Init+0x202>
 80045ae:	2306      	movs	r3, #6
 80045b0:	e00c      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045b2:	2307      	movs	r3, #7
 80045b4:	e00a      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045b6:	2305      	movs	r3, #5
 80045b8:	e008      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045ba:	2304      	movs	r3, #4
 80045bc:	e006      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045be:	2303      	movs	r3, #3
 80045c0:	e004      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e002      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_GPIO_Init+0x21c>
 80045ca:	2300      	movs	r3, #0
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	f002 0203 	and.w	r2, r2, #3
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	4093      	lsls	r3, r2
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045dc:	4935      	ldr	r1, [pc, #212]	@ (80046b4 <HAL_GPIO_Init+0x304>)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ea:	4b3a      	ldr	r3, [pc, #232]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800460e:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004614:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004638:	4a26      	ldr	r2, [pc, #152]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800463e:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004662:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004668:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800468c:	4a11      	ldr	r2, [pc, #68]	@ (80046d4 <HAL_GPIO_Init+0x324>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	f67f ae96 	bls.w	80043cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3724      	adds	r7, #36	@ 0x24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40013800 	.word	0x40013800
 80046b8:	40020000 	.word	0x40020000
 80046bc:	40020400 	.word	0x40020400
 80046c0:	40020800 	.word	0x40020800
 80046c4:	40020c00 	.word	0x40020c00
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40021400 	.word	0x40021400
 80046d0:	40021800 	.word	0x40021800
 80046d4:	40013c00 	.word	0x40013c00

080046d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	e001      	b.n	80046fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
 8004714:	4613      	mov	r3, r2
 8004716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004718:	787b      	ldrb	r3, [r7, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800471e:	887a      	ldrh	r2, [r7, #2]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004724:	e003      	b.n	800472e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004726:	887b      	ldrh	r3, [r7, #2]
 8004728:	041a      	lsls	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	619a      	str	r2, [r3, #24]
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e12b      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fbb6 	bl	8003ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	@ 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800478e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800479e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047a0:	f000 fdac 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 80047a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a81      	ldr	r2, [pc, #516]	@ (80049b0 <HAL_I2C_Init+0x274>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d807      	bhi.n	80047c0 <HAL_I2C_Init+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a80      	ldr	r2, [pc, #512]	@ (80049b4 <HAL_I2C_Init+0x278>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf94      	ite	ls
 80047b8:	2301      	movls	r3, #1
 80047ba:	2300      	movhi	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e006      	b.n	80047ce <HAL_I2C_Init+0x92>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a7d      	ldr	r2, [pc, #500]	@ (80049b8 <HAL_I2C_Init+0x27c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0e7      	b.n	80049a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a78      	ldr	r2, [pc, #480]	@ (80049bc <HAL_I2C_Init+0x280>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	0c9b      	lsrs	r3, r3, #18
 80047e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a6a      	ldr	r2, [pc, #424]	@ (80049b0 <HAL_I2C_Init+0x274>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d802      	bhi.n	8004810 <HAL_I2C_Init+0xd4>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	e009      	b.n	8004824 <HAL_I2C_Init+0xe8>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	4a69      	ldr	r2, [pc, #420]	@ (80049c0 <HAL_I2C_Init+0x284>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	3301      	adds	r3, #1
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004836:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	495c      	ldr	r1, [pc, #368]	@ (80049b0 <HAL_I2C_Init+0x274>)
 8004840:	428b      	cmp	r3, r1
 8004842:	d819      	bhi.n	8004878 <HAL_I2C_Init+0x13c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e59      	subs	r1, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004852:	1c59      	adds	r1, r3, #1
 8004854:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004858:	400b      	ands	r3, r1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_I2C_Init+0x138>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e59      	subs	r1, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fbb1 f3f3 	udiv	r3, r1, r3
 800486c:	3301      	adds	r3, #1
 800486e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004872:	e051      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004874:	2304      	movs	r3, #4
 8004876:	e04f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <HAL_I2C_Init+0x168>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e012      	b.n	80048ca <HAL_I2C_Init+0x18e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1e58      	subs	r0, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	0099      	lsls	r1, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ba:	3301      	adds	r3, #1
 80048bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Init+0x196>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e022      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <HAL_I2C_Init+0x1bc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1e58      	subs	r0, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	440b      	add	r3, r1
 80048e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Init+0x1dc>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	6809      	ldr	r1, [r1, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004946:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6911      	ldr	r1, [r2, #16]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68d2      	ldr	r2, [r2, #12]
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	430b      	orrs	r3, r1
 800495a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	000186a0 	.word	0x000186a0
 80049b4:	001e847f 	.word	0x001e847f
 80049b8:	003d08ff 	.word	0x003d08ff
 80049bc:	431bde83 	.word	0x431bde83
 80049c0:	10624dd3 	.word	0x10624dd3

080049c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	460b      	mov	r3, r1
 80049d2:	817b      	strh	r3, [r7, #10]
 80049d4:	4613      	mov	r3, r2
 80049d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049d8:	f7ff fbd8 	bl	800418c <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	f040 80e0 	bne.w	8004bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2319      	movs	r3, #25
 80049f2:	2201      	movs	r2, #1
 80049f4:	4970      	ldr	r1, [pc, #448]	@ (8004bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f964 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0d3      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_I2C_Master_Transmit+0x50>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0cc      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d007      	beq.n	8004a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2221      	movs	r2, #33	@ 0x21
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2210      	movs	r2, #16
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	893a      	ldrh	r2, [r7, #8]
 8004a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a50      	ldr	r2, [pc, #320]	@ (8004bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8004a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a7c:	8979      	ldrh	r1, [r7, #10]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f89c 	bl	8004bc0 <I2C_MasterRequestWrite>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e08d      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004aa8:	e066      	b.n	8004b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	6a39      	ldr	r1, [r7, #32]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fa22 	bl	8004ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d107      	bne.n	8004ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e06b      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	781a      	ldrb	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d11b      	bne.n	8004b4c <HAL_I2C_Master_Transmit+0x188>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d017      	beq.n	8004b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6a39      	ldr	r1, [r7, #32]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fa19 	bl	8004f88 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e01a      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d194      	bne.n	8004aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	00100002 	.word	0x00100002
 8004bbc:	ffff0000 	.word	0xffff0000

08004bc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d006      	beq.n	8004bea <I2C_MasterRequestWrite+0x2a>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d003      	beq.n	8004bea <I2C_MasterRequestWrite+0x2a>
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004be8:	d108      	bne.n	8004bfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e00b      	b.n	8004c14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	2b12      	cmp	r3, #18
 8004c02:	d107      	bne.n	8004c14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f84f 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c3a:	d103      	bne.n	8004c44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e035      	b.n	8004cb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c50:	d108      	bne.n	8004c64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c60:	611a      	str	r2, [r3, #16]
 8004c62:	e01b      	b.n	8004c9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c64:	897b      	ldrh	r3, [r7, #10]
 8004c66:	11db      	asrs	r3, r3, #7
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f003 0306 	and.w	r3, r3, #6
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f063 030f 	orn	r3, r3, #15
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	490e      	ldr	r1, [pc, #56]	@ (8004cbc <I2C_MasterRequestWrite+0xfc>)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f898 	bl	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e010      	b.n	8004cb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4907      	ldr	r1, [pc, #28]	@ (8004cc0 <I2C_MasterRequestWrite+0x100>)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f888 	bl	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	00010008 	.word	0x00010008
 8004cc0:	00010002 	.word	0x00010002

08004cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd4:	e048      	b.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cdc:	d044      	beq.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7ff fa55 	bl	800418c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d139      	bne.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d10d      	bne.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	e00c      	b.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d116      	bne.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e023      	b.n	8004db0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10d      	bne.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	e00c      	b.n	8004da8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	43da      	mvns	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d093      	beq.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc6:	e071      	b.n	8004eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd6:	d123      	bne.n	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e067      	b.n	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e26:	d041      	beq.n	8004eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e28:	f7ff f9b0 	bl	800418c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d136      	bne.n	8004eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10c      	bne.n	8004e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e00b      	b.n	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	43da      	mvns	r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e021      	b.n	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	0c1b      	lsrs	r3, r3, #16
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10c      	bne.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e00b      	b.n	8004ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf14      	ite	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	2300      	moveq	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f47f af6d 	bne.w	8004dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f04:	e034      	b.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f886 	bl	8005018 <I2C_IsAcknowledgeFailed>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e034      	b.n	8004f80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f1c:	d028      	beq.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7ff f935 	bl	800418c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11d      	bne.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3e:	2b80      	cmp	r3, #128	@ 0x80
 8004f40:	d016      	beq.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e007      	b.n	8004f80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f7a:	2b80      	cmp	r3, #128	@ 0x80
 8004f7c:	d1c3      	bne.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f94:	e034      	b.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f83e 	bl	8005018 <I2C_IsAcknowledgeFailed>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e034      	b.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fac:	d028      	beq.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7ff f8ed 	bl	800418c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d016      	beq.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d1c3      	bne.n	8004f96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502e:	d11b      	bne.n	8005068 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005038:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005054:	f043 0204 	orr.w	r2, r3, #4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4b20      	ldr	r3, [pc, #128]	@ (8005108 <HAL_PWREx_EnableOverDrive+0x90>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	4a1f      	ldr	r2, [pc, #124]	@ (8005108 <HAL_PWREx_EnableOverDrive+0x90>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	@ 0x40
 8005092:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <HAL_PWREx_EnableOverDrive+0x90>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800509e:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <HAL_PWREx_EnableOverDrive+0x94>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a4:	f7ff f872 	bl	800418c <HAL_GetTick>
 80050a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050aa:	e009      	b.n	80050c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050ac:	f7ff f86e 	bl	800418c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050ba:	d901      	bls.n	80050c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e01f      	b.n	8005100 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050c0:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <HAL_PWREx_EnableOverDrive+0x98>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050cc:	d1ee      	bne.n	80050ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050ce:	4b11      	ldr	r3, [pc, #68]	@ (8005114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d4:	f7ff f85a 	bl	800418c <HAL_GetTick>
 80050d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050da:	e009      	b.n	80050f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050dc:	f7ff f856 	bl	800418c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050ea:	d901      	bls.n	80050f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e007      	b.n	8005100 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050f0:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <HAL_PWREx_EnableOverDrive+0x98>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050fc:	d1ee      	bne.n	80050dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	420e0040 	.word	0x420e0040
 8005110:	40007000 	.word	0x40007000
 8005114:	420e0044 	.word	0x420e0044

08005118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0cc      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800512c:	4b68      	ldr	r3, [pc, #416]	@ (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d90c      	bls.n	8005154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b65      	ldr	r3, [pc, #404]	@ (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b63      	ldr	r3, [pc, #396]	@ (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0b8      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b59      	ldr	r3, [pc, #356]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a58      	ldr	r2, [pc, #352]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005184:	4b53      	ldr	r3, [pc, #332]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a52      	ldr	r2, [pc, #328]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800518e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b50      	ldr	r3, [pc, #320]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	494d      	ldr	r1, [pc, #308]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d044      	beq.n	8005238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	4b47      	ldr	r3, [pc, #284]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d003      	beq.n	80051d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d6:	4b3f      	ldr	r3, [pc, #252]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e06f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e6:	4b3b      	ldr	r3, [pc, #236]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e067      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f6:	4b37      	ldr	r3, [pc, #220]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4934      	ldr	r1, [pc, #208]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005208:	f7fe ffc0 	bl	800418c <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	e00a      	b.n	8005226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fe ffbc 	bl	800418c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e04f      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	4b2b      	ldr	r3, [pc, #172]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 020c 	and.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d1eb      	bne.n	8005210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005238:	4b25      	ldr	r3, [pc, #148]	@ (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d20c      	bcs.n	8005260 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b22      	ldr	r3, [pc, #136]	@ (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b20      	ldr	r3, [pc, #128]	@ (80052d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e032      	b.n	80052c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	4b19      	ldr	r3, [pc, #100]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4916      	ldr	r1, [pc, #88]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528a:	4b12      	ldr	r3, [pc, #72]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	490e      	ldr	r1, [pc, #56]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800529e:	f000 f873 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	490a      	ldr	r1, [pc, #40]	@ (80052d8 <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	5ccb      	ldrb	r3, [r1, r3]
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	4a09      	ldr	r2, [pc, #36]	@ (80052dc <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052ba:	4b09      	ldr	r3, [pc, #36]	@ (80052e0 <HAL_RCC_ClockConfig+0x1c8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fe50 	bl	8003f64 <HAL_InitTick>

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40023c00 	.word	0x40023c00
 80052d4:	40023800 	.word	0x40023800
 80052d8:	080064e0 	.word	0x080064e0
 80052dc:	20000008 	.word	0x20000008
 80052e0:	2000000c 	.word	0x2000000c

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e8:	4b03      	ldr	r3, [pc, #12]	@ (80052f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000008 	.word	0x20000008

080052fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005300:	f7ff fff0 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	@ (800531c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0a9b      	lsrs	r3, r3, #10
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	@ (8005320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40023800 	.word	0x40023800
 8005320:	080064f0 	.word	0x080064f0

08005324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	220f      	movs	r2, #15
 8005332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005334:	4b12      	ldr	r3, [pc, #72]	@ (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0203 	and.w	r2, r3, #3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005340:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800534c:	4b0c      	ldr	r3, [pc, #48]	@ (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005366:	4b07      	ldr	r3, [pc, #28]	@ (8005384 <HAL_RCC_GetClockConfig+0x60>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	601a      	str	r2, [r3, #0]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	40023c00 	.word	0x40023c00

08005388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800538c:	b0ae      	sub	sp, #184	@ 0xb8
 800538e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ae:	4bcb      	ldr	r3, [pc, #812]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	f200 8206 	bhi.w	80057c8 <HAL_RCC_GetSysClockFreq+0x440>
 80053bc:	a201      	add	r2, pc, #4	@ (adr r2, 80053c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	080057c9 	.word	0x080057c9
 80053cc:	080057c9 	.word	0x080057c9
 80053d0:	080057c9 	.word	0x080057c9
 80053d4:	08005401 	.word	0x08005401
 80053d8:	080057c9 	.word	0x080057c9
 80053dc:	080057c9 	.word	0x080057c9
 80053e0:	080057c9 	.word	0x080057c9
 80053e4:	08005409 	.word	0x08005409
 80053e8:	080057c9 	.word	0x080057c9
 80053ec:	080057c9 	.word	0x080057c9
 80053f0:	080057c9 	.word	0x080057c9
 80053f4:	080055f9 	.word	0x080055f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4bb9      	ldr	r3, [pc, #740]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80053fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80053fe:	e1e7      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005400:	4bb8      	ldr	r3, [pc, #736]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005406:	e1e3      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005408:	4bb4      	ldr	r3, [pc, #720]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005414:	4bb1      	ldr	r3, [pc, #708]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d071      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005420:	4bae      	ldr	r3, [pc, #696]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	2200      	movs	r2, #0
 8005428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800542c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005446:	4622      	mov	r2, r4
 8005448:	462b      	mov	r3, r5
 800544a:	f04f 0000 	mov.w	r0, #0
 800544e:	f04f 0100 	mov.w	r1, #0
 8005452:	0159      	lsls	r1, r3, #5
 8005454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005458:	0150      	lsls	r0, r2, #5
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4621      	mov	r1, r4
 8005460:	1a51      	subs	r1, r2, r1
 8005462:	6439      	str	r1, [r7, #64]	@ 0x40
 8005464:	4629      	mov	r1, r5
 8005466:	eb63 0301 	sbc.w	r3, r3, r1
 800546a:	647b      	str	r3, [r7, #68]	@ 0x44
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005478:	4649      	mov	r1, r9
 800547a:	018b      	lsls	r3, r1, #6
 800547c:	4641      	mov	r1, r8
 800547e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005482:	4641      	mov	r1, r8
 8005484:	018a      	lsls	r2, r1, #6
 8005486:	4641      	mov	r1, r8
 8005488:	1a51      	subs	r1, r2, r1
 800548a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800548c:	4649      	mov	r1, r9
 800548e:	eb63 0301 	sbc.w	r3, r3, r1
 8005492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80054a0:	4649      	mov	r1, r9
 80054a2:	00cb      	lsls	r3, r1, #3
 80054a4:	4641      	mov	r1, r8
 80054a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054aa:	4641      	mov	r1, r8
 80054ac:	00ca      	lsls	r2, r1, #3
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	4622      	mov	r2, r4
 80054b6:	189b      	adds	r3, r3, r2
 80054b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ba:	462b      	mov	r3, r5
 80054bc:	460a      	mov	r2, r1
 80054be:	eb42 0303 	adc.w	r3, r2, r3
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054d0:	4629      	mov	r1, r5
 80054d2:	024b      	lsls	r3, r1, #9
 80054d4:	4621      	mov	r1, r4
 80054d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054da:	4621      	mov	r1, r4
 80054dc:	024a      	lsls	r2, r1, #9
 80054de:	4610      	mov	r0, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80054f4:	f7fa fed6 	bl	80002a4 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4613      	mov	r3, r2
 80054fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005502:	e067      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005504:	4b75      	ldr	r3, [pc, #468]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005510:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800551e:	2300      	movs	r3, #0
 8005520:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005522:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	f04f 0000 	mov.w	r0, #0
 800552e:	f04f 0100 	mov.w	r1, #0
 8005532:	0159      	lsls	r1, r3, #5
 8005534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005538:	0150      	lsls	r0, r2, #5
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4621      	mov	r1, r4
 8005540:	1a51      	subs	r1, r2, r1
 8005542:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005544:	4629      	mov	r1, r5
 8005546:	eb63 0301 	sbc.w	r3, r3, r1
 800554a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005558:	4649      	mov	r1, r9
 800555a:	018b      	lsls	r3, r1, #6
 800555c:	4641      	mov	r1, r8
 800555e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005562:	4641      	mov	r1, r8
 8005564:	018a      	lsls	r2, r1, #6
 8005566:	4641      	mov	r1, r8
 8005568:	ebb2 0a01 	subs.w	sl, r2, r1
 800556c:	4649      	mov	r1, r9
 800556e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800557e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005586:	4692      	mov	sl, r2
 8005588:	469b      	mov	fp, r3
 800558a:	4623      	mov	r3, r4
 800558c:	eb1a 0303 	adds.w	r3, sl, r3
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	462b      	mov	r3, r5
 8005594:	eb4b 0303 	adc.w	r3, fp, r3
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80055a6:	4629      	mov	r1, r5
 80055a8:	028b      	lsls	r3, r1, #10
 80055aa:	4621      	mov	r1, r4
 80055ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055b0:	4621      	mov	r1, r4
 80055b2:	028a      	lsls	r2, r1, #10
 80055b4:	4610      	mov	r0, r2
 80055b6:	4619      	mov	r1, r3
 80055b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055bc:	2200      	movs	r2, #0
 80055be:	673b      	str	r3, [r7, #112]	@ 0x70
 80055c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80055c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80055c6:	f7fa fe6d 	bl	80002a4 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4613      	mov	r3, r2
 80055d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055d4:	4b41      	ldr	r3, [pc, #260]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	3301      	adds	r3, #1
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80055e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055f6:	e0eb      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055f8:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005604:	4b35      	ldr	r3, [pc, #212]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d06b      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005610:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <HAL_RCC_GetSysClockFreq+0x354>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	099b      	lsrs	r3, r3, #6
 8005616:	2200      	movs	r2, #0
 8005618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800561a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800561c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	663b      	str	r3, [r7, #96]	@ 0x60
 8005624:	2300      	movs	r3, #0
 8005626:	667b      	str	r3, [r7, #100]	@ 0x64
 8005628:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800562c:	4622      	mov	r2, r4
 800562e:	462b      	mov	r3, r5
 8005630:	f04f 0000 	mov.w	r0, #0
 8005634:	f04f 0100 	mov.w	r1, #0
 8005638:	0159      	lsls	r1, r3, #5
 800563a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800563e:	0150      	lsls	r0, r2, #5
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4621      	mov	r1, r4
 8005646:	1a51      	subs	r1, r2, r1
 8005648:	61b9      	str	r1, [r7, #24]
 800564a:	4629      	mov	r1, r5
 800564c:	eb63 0301 	sbc.w	r3, r3, r1
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800565e:	4659      	mov	r1, fp
 8005660:	018b      	lsls	r3, r1, #6
 8005662:	4651      	mov	r1, sl
 8005664:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005668:	4651      	mov	r1, sl
 800566a:	018a      	lsls	r2, r1, #6
 800566c:	4651      	mov	r1, sl
 800566e:	ebb2 0801 	subs.w	r8, r2, r1
 8005672:	4659      	mov	r1, fp
 8005674:	eb63 0901 	sbc.w	r9, r3, r1
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005684:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005688:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568c:	4690      	mov	r8, r2
 800568e:	4699      	mov	r9, r3
 8005690:	4623      	mov	r3, r4
 8005692:	eb18 0303 	adds.w	r3, r8, r3
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	462b      	mov	r3, r5
 800569a:	eb49 0303 	adc.w	r3, r9, r3
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80056ac:	4629      	mov	r1, r5
 80056ae:	024b      	lsls	r3, r1, #9
 80056b0:	4621      	mov	r1, r4
 80056b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056b6:	4621      	mov	r1, r4
 80056b8:	024a      	lsls	r2, r1, #9
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056c2:	2200      	movs	r2, #0
 80056c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80056c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056cc:	f7fa fdea 	bl	80002a4 <__aeabi_uldivmod>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4613      	mov	r3, r2
 80056d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056da:	e065      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x420>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	00f42400 	.word	0x00f42400
 80056e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e8:	4b3d      	ldr	r3, [pc, #244]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	2200      	movs	r2, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	4611      	mov	r1, r2
 80056f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80056fa:	2300      	movs	r3, #0
 80056fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80056fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005702:	4642      	mov	r2, r8
 8005704:	464b      	mov	r3, r9
 8005706:	f04f 0000 	mov.w	r0, #0
 800570a:	f04f 0100 	mov.w	r1, #0
 800570e:	0159      	lsls	r1, r3, #5
 8005710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005714:	0150      	lsls	r0, r2, #5
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4641      	mov	r1, r8
 800571c:	1a51      	subs	r1, r2, r1
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	4649      	mov	r1, r9
 8005722:	eb63 0301 	sbc.w	r3, r3, r1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005734:	4659      	mov	r1, fp
 8005736:	018b      	lsls	r3, r1, #6
 8005738:	4651      	mov	r1, sl
 800573a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800573e:	4651      	mov	r1, sl
 8005740:	018a      	lsls	r2, r1, #6
 8005742:	4651      	mov	r1, sl
 8005744:	1a54      	subs	r4, r2, r1
 8005746:	4659      	mov	r1, fp
 8005748:	eb63 0501 	sbc.w	r5, r3, r1
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	00eb      	lsls	r3, r5, #3
 8005756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800575a:	00e2      	lsls	r2, r4, #3
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	4643      	mov	r3, r8
 8005762:	18e3      	adds	r3, r4, r3
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	464b      	mov	r3, r9
 8005768:	eb45 0303 	adc.w	r3, r5, r3
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800577a:	4629      	mov	r1, r5
 800577c:	028b      	lsls	r3, r1, #10
 800577e:	4621      	mov	r1, r4
 8005780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005784:	4621      	mov	r1, r4
 8005786:	028a      	lsls	r2, r1, #10
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005790:	2200      	movs	r2, #0
 8005792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005794:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005796:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800579a:	f7fa fd83 	bl	80002a4 <__aeabi_uldivmod>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4613      	mov	r3, r2
 80057a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80057a8:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	0f1b      	lsrs	r3, r3, #28
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80057b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80057c6:	e003      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80057ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80057ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	37b8      	adds	r7, #184	@ 0xb8
 80057d8:	46bd      	mov	sp, r7
 80057da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057de:	bf00      	nop
 80057e0:	40023800 	.word	0x40023800
 80057e4:	00f42400 	.word	0x00f42400

080057e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e28d      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8083 	beq.w	800590e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005808:	4b94      	ldr	r3, [pc, #592]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b04      	cmp	r3, #4
 8005812:	d019      	beq.n	8005848 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005814:	4b91      	ldr	r3, [pc, #580]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
        || \
 800581c:	2b08      	cmp	r3, #8
 800581e:	d106      	bne.n	800582e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005820:	4b8e      	ldr	r3, [pc, #568]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005828:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582c:	d00c      	beq.n	8005848 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800582e:	4b8b      	ldr	r3, [pc, #556]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005836:	2b0c      	cmp	r3, #12
 8005838:	d112      	bne.n	8005860 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800583a:	4b88      	ldr	r3, [pc, #544]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005842:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005846:	d10b      	bne.n	8005860 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	4b84      	ldr	r3, [pc, #528]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05b      	beq.n	800590c <HAL_RCC_OscConfig+0x124>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d157      	bne.n	800590c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e25a      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005868:	d106      	bne.n	8005878 <HAL_RCC_OscConfig+0x90>
 800586a:	4b7c      	ldr	r3, [pc, #496]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7b      	ldr	r2, [pc, #492]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e01d      	b.n	80058b4 <HAL_RCC_OscConfig+0xcc>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005880:	d10c      	bne.n	800589c <HAL_RCC_OscConfig+0xb4>
 8005882:	4b76      	ldr	r3, [pc, #472]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a75      	ldr	r2, [pc, #468]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	4b73      	ldr	r3, [pc, #460]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a72      	ldr	r2, [pc, #456]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e00b      	b.n	80058b4 <HAL_RCC_OscConfig+0xcc>
 800589c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a6e      	ldr	r2, [pc, #440]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80058a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	4b6c      	ldr	r3, [pc, #432]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6b      	ldr	r2, [pc, #428]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80058ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d013      	beq.n	80058e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fe fc66 	bl	800418c <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c4:	f7fe fc62 	bl	800418c <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b64      	cmp	r3, #100	@ 0x64
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e21f      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d6:	4b61      	ldr	r3, [pc, #388]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f0      	beq.n	80058c4 <HAL_RCC_OscConfig+0xdc>
 80058e2:	e014      	b.n	800590e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fe fc52 	bl	800418c <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058ec:	f7fe fc4e 	bl	800418c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	@ 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e20b      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fe:	4b57      	ldr	r3, [pc, #348]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x104>
 800590a:	e000      	b.n	800590e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d06f      	beq.n	80059fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800591a:	4b50      	ldr	r3, [pc, #320]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 030c 	and.w	r3, r3, #12
 8005922:	2b00      	cmp	r3, #0
 8005924:	d017      	beq.n	8005956 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005926:	4b4d      	ldr	r3, [pc, #308]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
        || \
 800592e:	2b08      	cmp	r3, #8
 8005930:	d105      	bne.n	800593e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005932:	4b4a      	ldr	r3, [pc, #296]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800593e:	4b47      	ldr	r3, [pc, #284]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005946:	2b0c      	cmp	r3, #12
 8005948:	d11c      	bne.n	8005984 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800594a:	4b44      	ldr	r3, [pc, #272]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d116      	bne.n	8005984 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005956:	4b41      	ldr	r3, [pc, #260]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_RCC_OscConfig+0x186>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d001      	beq.n	800596e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e1d3      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4937      	ldr	r1, [pc, #220]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	e03a      	b.n	80059fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d020      	beq.n	80059ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800598c:	4b34      	ldr	r3, [pc, #208]	@ (8005a60 <HAL_RCC_OscConfig+0x278>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005992:	f7fe fbfb 	bl	800418c <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800599a:	f7fe fbf7 	bl	800418c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e1b4      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ac:	4b2b      	ldr	r3, [pc, #172]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b8:	4b28      	ldr	r3, [pc, #160]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4925      	ldr	r1, [pc, #148]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
 80059cc:	e015      	b.n	80059fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ce:	4b24      	ldr	r3, [pc, #144]	@ (8005a60 <HAL_RCC_OscConfig+0x278>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fbda 	bl	800418c <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fe fbd6 	bl	800418c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e193      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ee:	4b1b      	ldr	r3, [pc, #108]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d036      	beq.n	8005a74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0e:	4b15      	ldr	r3, [pc, #84]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7fe fbba 	bl	800418c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a1c:	f7fe fbb6 	bl	800418c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e173      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <HAL_RCC_OscConfig+0x274>)
 8005a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x234>
 8005a3a:	e01b      	b.n	8005a74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3c:	4b09      	ldr	r3, [pc, #36]	@ (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fe fba3 	bl	800418c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a48:	e00e      	b.n	8005a68 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a4a:	f7fe fb9f 	bl	800418c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d907      	bls.n	8005a68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e15c      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	42470000 	.word	0x42470000
 8005a64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a68:	4b8a      	ldr	r3, [pc, #552]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ea      	bne.n	8005a4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8097 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a86:	4b83      	ldr	r3, [pc, #524]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10f      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	4b7f      	ldr	r3, [pc, #508]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab2:	4b79      	ldr	r3, [pc, #484]	@ (8005c98 <HAL_RCC_OscConfig+0x4b0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d118      	bne.n	8005af0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005abe:	4b76      	ldr	r3, [pc, #472]	@ (8005c98 <HAL_RCC_OscConfig+0x4b0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a75      	ldr	r2, [pc, #468]	@ (8005c98 <HAL_RCC_OscConfig+0x4b0>)
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aca:	f7fe fb5f 	bl	800418c <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad2:	f7fe fb5b 	bl	800418c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e118      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c98 <HAL_RCC_OscConfig+0x4b0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d106      	bne.n	8005b06 <HAL_RCC_OscConfig+0x31e>
 8005af8:	4b66      	ldr	r3, [pc, #408]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afc:	4a65      	ldr	r2, [pc, #404]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b04:	e01c      	b.n	8005b40 <HAL_RCC_OscConfig+0x358>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCC_OscConfig+0x340>
 8005b0e:	4b61      	ldr	r3, [pc, #388]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b12:	4a60      	ldr	r2, [pc, #384]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b14:	f043 0304 	orr.w	r3, r3, #4
 8005b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1e:	4a5d      	ldr	r2, [pc, #372]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b26:	e00b      	b.n	8005b40 <HAL_RCC_OscConfig+0x358>
 8005b28:	4b5a      	ldr	r3, [pc, #360]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	4a59      	ldr	r2, [pc, #356]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b34:	4b57      	ldr	r3, [pc, #348]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b38:	4a56      	ldr	r2, [pc, #344]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b3a:	f023 0304 	bic.w	r3, r3, #4
 8005b3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d015      	beq.n	8005b74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b48:	f7fe fb20 	bl	800418c <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b50:	f7fe fb1c 	bl	800418c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e0d7      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b66:	4b4b      	ldr	r3, [pc, #300]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0ee      	beq.n	8005b50 <HAL_RCC_OscConfig+0x368>
 8005b72:	e014      	b.n	8005b9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fe fb0a 	bl	800418c <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7c:	f7fe fb06 	bl	800418c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0c1      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b92:	4b40      	ldr	r3, [pc, #256]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1ee      	bne.n	8005b7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80ad 	beq.w	8005d14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bba:	4b36      	ldr	r3, [pc, #216]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d060      	beq.n	8005c88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d145      	bne.n	8005c5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bce:	4b33      	ldr	r3, [pc, #204]	@ (8005c9c <HAL_RCC_OscConfig+0x4b4>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fada 	bl	800418c <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fe fad6 	bl	800418c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e093      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bee:	4b29      	ldr	r3, [pc, #164]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	019b      	lsls	r3, r3, #6
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	3b01      	subs	r3, #1
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c24:	071b      	lsls	r3, r3, #28
 8005c26:	491b      	ldr	r1, [pc, #108]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c9c <HAL_RCC_OscConfig+0x4b4>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c32:	f7fe faab 	bl	800418c <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3a:	f7fe faa7 	bl	800418c <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e064      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4c:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x452>
 8005c58:	e05c      	b.n	8005d14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5a:	4b10      	ldr	r3, [pc, #64]	@ (8005c9c <HAL_RCC_OscConfig+0x4b4>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fe fa94 	bl	800418c <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fe fa90 	bl	800418c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e04d      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7a:	4b06      	ldr	r3, [pc, #24]	@ (8005c94 <HAL_RCC_OscConfig+0x4ac>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x480>
 8005c86:	e045      	b.n	8005d14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e040      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8005d20 <HAL_RCC_OscConfig+0x538>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d030      	beq.n	8005d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d129      	bne.n	8005d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d122      	bne.n	8005d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d119      	bne.n	8005d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d10f      	bne.n	8005d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40023800 	.word	0x40023800

08005d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e041      	b.n	8005dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f839 	bl	8005dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f000 f9c0 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e04e      	b.n	8005e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	@ (8005e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1a:	d01d      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <HAL_TIM_Base_Start_IT+0xd4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a18      	ldr	r2, [pc, #96]	@ (8005eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d111      	bne.n	8005e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d010      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	e007      	b.n	8005e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40001800 	.word	0x40001800

08005eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0202 	mvn.w	r2, #2
 8005eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8d2 	bl	80060ac <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8c4 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8d5 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0204 	mvn.w	r2, #4
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8ac 	bl	80060ac <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f89e 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8af 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0208 	mvn.w	r2, #8
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f886 	bl	80060ac <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f878 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f889 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0210 	mvn.w	r2, #16
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f860 	bl	80060ac <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f852 	bl	8006098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f863 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0201 	mvn.w	r2, #1
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fd fef4 	bl	8003e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f906 	bl	8006254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f834 	bl	80060d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0220 	mvn.w	r2, #32
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8d8 	bl	8006240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a46      	ldr	r2, [pc, #280]	@ (8006214 <TIM_Base_SetConfig+0x12c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006106:	d00f      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a43      	ldr	r2, [pc, #268]	@ (8006218 <TIM_Base_SetConfig+0x130>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00b      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a42      	ldr	r2, [pc, #264]	@ (800621c <TIM_Base_SetConfig+0x134>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a41      	ldr	r2, [pc, #260]	@ (8006220 <TIM_Base_SetConfig+0x138>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a40      	ldr	r2, [pc, #256]	@ (8006224 <TIM_Base_SetConfig+0x13c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d108      	bne.n	800613a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a35      	ldr	r2, [pc, #212]	@ (8006214 <TIM_Base_SetConfig+0x12c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d02b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006148:	d027      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a32      	ldr	r2, [pc, #200]	@ (8006218 <TIM_Base_SetConfig+0x130>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d023      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a31      	ldr	r2, [pc, #196]	@ (800621c <TIM_Base_SetConfig+0x134>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01f      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a30      	ldr	r2, [pc, #192]	@ (8006220 <TIM_Base_SetConfig+0x138>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2f      	ldr	r2, [pc, #188]	@ (8006224 <TIM_Base_SetConfig+0x13c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d017      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2e      	ldr	r2, [pc, #184]	@ (8006228 <TIM_Base_SetConfig+0x140>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2d      	ldr	r2, [pc, #180]	@ (800622c <TIM_Base_SetConfig+0x144>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2c      	ldr	r2, [pc, #176]	@ (8006230 <TIM_Base_SetConfig+0x148>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2b      	ldr	r2, [pc, #172]	@ (8006234 <TIM_Base_SetConfig+0x14c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2a      	ldr	r2, [pc, #168]	@ (8006238 <TIM_Base_SetConfig+0x150>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a29      	ldr	r2, [pc, #164]	@ (800623c <TIM_Base_SetConfig+0x154>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a10      	ldr	r2, [pc, #64]	@ (8006214 <TIM_Base_SetConfig+0x12c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0xf8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a12      	ldr	r2, [pc, #72]	@ (8006224 <TIM_Base_SetConfig+0x13c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f023 0201 	bic.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	611a      	str	r2, [r3, #16]
  }
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40010000 	.word	0x40010000
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800
 8006220:	40000c00 	.word	0x40000c00
 8006224:	40010400 	.word	0x40010400
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800
 8006234:	40001800 	.word	0x40001800
 8006238:	40001c00 	.word	0x40001c00
 800623c:	40002000 	.word	0x40002000

08006240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <memcmp>:
 8006268:	b510      	push	{r4, lr}
 800626a:	3901      	subs	r1, #1
 800626c:	4402      	add	r2, r0
 800626e:	4290      	cmp	r0, r2
 8006270:	d101      	bne.n	8006276 <memcmp+0xe>
 8006272:	2000      	movs	r0, #0
 8006274:	e005      	b.n	8006282 <memcmp+0x1a>
 8006276:	7803      	ldrb	r3, [r0, #0]
 8006278:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800627c:	42a3      	cmp	r3, r4
 800627e:	d001      	beq.n	8006284 <memcmp+0x1c>
 8006280:	1b18      	subs	r0, r3, r4
 8006282:	bd10      	pop	{r4, pc}
 8006284:	3001      	adds	r0, #1
 8006286:	e7f2      	b.n	800626e <memcmp+0x6>

08006288 <memset>:
 8006288:	4402      	add	r2, r0
 800628a:	4603      	mov	r3, r0
 800628c:	4293      	cmp	r3, r2
 800628e:	d100      	bne.n	8006292 <memset+0xa>
 8006290:	4770      	bx	lr
 8006292:	f803 1b01 	strb.w	r1, [r3], #1
 8006296:	e7f9      	b.n	800628c <memset+0x4>

08006298 <__libc_init_array>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	4d0d      	ldr	r5, [pc, #52]	@ (80062d0 <__libc_init_array+0x38>)
 800629c:	4c0d      	ldr	r4, [pc, #52]	@ (80062d4 <__libc_init_array+0x3c>)
 800629e:	1b64      	subs	r4, r4, r5
 80062a0:	10a4      	asrs	r4, r4, #2
 80062a2:	2600      	movs	r6, #0
 80062a4:	42a6      	cmp	r6, r4
 80062a6:	d109      	bne.n	80062bc <__libc_init_array+0x24>
 80062a8:	4d0b      	ldr	r5, [pc, #44]	@ (80062d8 <__libc_init_array+0x40>)
 80062aa:	4c0c      	ldr	r4, [pc, #48]	@ (80062dc <__libc_init_array+0x44>)
 80062ac:	f000 f826 	bl	80062fc <_init>
 80062b0:	1b64      	subs	r4, r4, r5
 80062b2:	10a4      	asrs	r4, r4, #2
 80062b4:	2600      	movs	r6, #0
 80062b6:	42a6      	cmp	r6, r4
 80062b8:	d105      	bne.n	80062c6 <__libc_init_array+0x2e>
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c0:	4798      	blx	r3
 80062c2:	3601      	adds	r6, #1
 80062c4:	e7ee      	b.n	80062a4 <__libc_init_array+0xc>
 80062c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ca:	4798      	blx	r3
 80062cc:	3601      	adds	r6, #1
 80062ce:	e7f2      	b.n	80062b6 <__libc_init_array+0x1e>
 80062d0:	08006500 	.word	0x08006500
 80062d4:	08006500 	.word	0x08006500
 80062d8:	08006500 	.word	0x08006500
 80062dc:	08006504 	.word	0x08006504

080062e0 <memcpy>:
 80062e0:	440a      	add	r2, r1
 80062e2:	4291      	cmp	r1, r2
 80062e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80062e8:	d100      	bne.n	80062ec <memcpy+0xc>
 80062ea:	4770      	bx	lr
 80062ec:	b510      	push	{r4, lr}
 80062ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062f6:	4291      	cmp	r1, r2
 80062f8:	d1f9      	bne.n	80062ee <memcpy+0xe>
 80062fa:	bd10      	pop	{r4, pc}

080062fc <_init>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr

08006308 <_fini>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	bf00      	nop
 800630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630e:	bc08      	pop	{r3}
 8006310:	469e      	mov	lr, r3
 8006312:	4770      	bx	lr
